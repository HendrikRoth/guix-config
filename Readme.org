#+TITLE: My personal guix system configuration [in progress]
#+PROPERTY: header-args :tangle-mode
#+PROPERTY: header-args:sh :tangle-mode

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:
:CONTENTS:
- [[#channels][Channels]]
:END:

* Channels
*.config/guix/channels.scm*
#+BEGIN_SRC scheme :tangle ~/.config/guix/channels.scm
  (list (channel
	 (name 'nonguix)
	 (commit "ee35a1f1cd50ba0d4bfee37f2b084bc0797885c")
	 (url "https://gitlab.com/nonguix/nonguix"))
	(channel
	 (name 'guix)
	 (commit "190187326ad7516dd6728eed7bb6ef2d4f92897a")
	 (url "https://git.savannah.gnu.org/git/guix.git")
	 (introduction
	  (make-channel-introduction
	   "9edb3f66fd807b096b48283debdcddccfea34bad"
	   (openpgp-fingerprint
	    "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+END_SRC

* Systems
** Base Configuration
*.config/guix/systems/base-system.scm:*
#+BEGIN_SRC scheme :tangle ~/.config/guix/systems/base-system.scm
  (define-module (base-system)
    #:use-module (gnu)
    #:use-module (gnu system nss)
    #:use-module (gnu services cups)
    #:use-module (gnu services desktop)
    #:use-module (gnu services docker)
    #:use-module (gnu services networking)
    #:use-module (gnu packages wm)
    #:use-module (gnu packages cups)
    #:use-module (gnu packages gtk)
    #:use-module (gnu packages xorg)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages web-browsers)
    #:use-module (gnu packages version-control)
    #:use-module (gnu packages package-management)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu system linux-initrd))

  (use-service-modules desktop org)
  (use-package-modules certs)
  (use-package-modules shells)
#+END_SRC

Define the =base-operating-system= which will be inherited by all machine configurations.

#+BEGIN_SRC scheme :tangle ~/.config/guix/systems/base-system.scm
  (define-public base-operating-system
    (operating-system
     (host-name "hendrik")
     (timezone "Europe/Berlin")
     (locale "en_US.utf-8")

     ;; Use non-free Linux and firmware
     (kernel linux)
     (firmware (list linux-firmware))
     (initrd microcode-initrd)

     ;; Keyboard layout
     (keyboard-layout (keyboard-layout "us" "altgr-intl"))

     ;; Dummy filesystem, will be overridden
     (file-systems (cons*
		    (file-system
		     (mount-point "/tmp")
		     (device "none")
		     (type "tmpfs")
		     (check? #f))
		    %base-file-systems))

     ;; User account
     (users (cons (user-account
		   (name "hendrik")
		   (comment "Hendrik Roth")
		   (group "users")
		   (home-directory "/home/hendrik")
		   (supplementary-groups '(
					   "wheel" ;; sudo
					   "netdev" ;; network devices
					   "tty"
					   "input"
					   "docker"
					   "lp" ;; control bluetooth devices
					   "audio" ;; control audio devices
					   "video" ;; control video devices
      )))
		  %base-user-accounts))

      ;; Bare minimum system packages
      (packages (append (list
        git
        ntfs-3g
        exfat-utils
        fuse-exfat
        vim
        emacs
        xterm
        bluez
        bluez-alsa
        pulseaudio
        tlp
        xf86-video-libinput
        nss-certs ;; for https access
        gvfs) ;; for user mounts
        %base-packages))
#+END_SRC

** Machines
*** work
My work machine at the office.

#+BEGIN_SRC scheme :tangle ~/.config/guix/systems/work.scm
  (define-module (work)
    #:use-module (base-system)
    #:use-module (gnu))

  (operating-system
   (inherit base-operating-system)
   (host-name "work")

   (mapped-devices
    (list (mapped-device
	   (source (uuid ""))
	   (target "system-root")
	   (type luks-device-mapping))))

   (file-systems (cons*
		  (file-system
		   (device (file-system-label "root"))
		   (mount-pount "/")
		   (type "ext4")
		   (dependencies mapped-devices))
		  %base-file-systems)))
#+END_SRC

*** desktop
My home workstation.

*** notebook
My travel notebook.

** USB Installation image
#+begin_src scheme :tangle ~/.config/guix/systems/install.scm
(define-module (nongnu system install)
  #:use-module (gnu system)
  #:use-module (gnu system install)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu curl)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages package-management)
  #:use-module (nongnu packages linux)
  #:export (installation-os-nonfree))

(define installation-os-nonfree
  (operating-system
    (inherit installation-os)
    (kernel linux)
    (firmware (list linux-firmware))
  (kernel-arguments '("net.iframes=0"))
  (packages (append (list
    exfat-utils fuse-exfat git curl vim emacs-no-x-toolkit)
    (operation-system-packages installation-os)))))

installation-os-nonfree
#+end_src

To build the image, run the command:
#+begin_src sh
guix system image ./install.scm --image-size=5G
#+end_src

Choose the install method =Install using the shell based process.= on boot.

* Programs
** Emacs
*** Package management
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src
*** Basic settings
**** Personal information
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq user-full-name "Hendrik Roth")
(setq user-mail-address "hi@hendrikroth.com")
#+end_src
**** ESC cancels all
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
**** UTF-8
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(set-default-coding-systems 'utf-8)
#+end_src
**** Tabs
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
(setq-default indent-tabs-mode nil)
#+end_src
**** Yes or no
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
**** Fill column to 80 characters
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default fill-column 80)
#+end_src
**** Keep .emacs.d clean
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package no-littering)
#+end_src
**** Tramp
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq tramp-default-method "ssh")
#+end_src
**** Moving deleted files to trash
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default delete-by-moving-to-trash t)
#+end_src
**** Increase undo limit (10mb)
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq undo-limit 10000000)
#+end_src
**** Handle CamelCase as seperate words
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(global-subword-mode 1)
#+end_src
*** Keybindings
**** Vim keybindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package undo-tree
             :init
	     (global-undo-tree-mode 1))

(use-package evil
             :after undo-tree
             :init
	     (setq evil-want-integration t)
	     (setq evil-want-keybinding nil)
	     (setq evil-want-C-u-scroll nil)
	     (setq evil-want-C-i-jump nil)
	     (setq evil-respect-visual-line-mode t)
	     (setq evil-undo-system 'undo-tree)
	     :config
	     (evil-mode 1)
	     (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	     (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	     ;; Use visual line motions even outside of visual-line-mode-buffers
	     (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	     (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

	     (evil-set-initial-state 'messages-buffer-mode 'normal)
	     (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
             :after evil
	     :init
	     :config
	     (evil-collection-init))
#+end_src
**** Leader bindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package general
	:config
	(general-evil-setup t)

(general-create-definer hr/leader-key-def
	:keymaps '(normal insert visual emacs)
	:prefix "SPC"
	:global-prefix "C-SPC")

(general-create-definer hr/ctrl-c-keys
	:prefix "C-c"))
#+end_src
*** Interface
**** Remove distractions
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq inhibit-startup-message t)

(scroll-bar-mode -1) ; Disable visual scrollbar
(tool-bar-mode -1) ; Disable toolbar
(tooltip-mode -1) ; Disable tooltips
(menu-bar-mode -1) ; Disable menu bar

(setq visible-bell t) ; Visual bell
#+end_src
**** Line numbers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(column-number-mode)

;; Relative line numbers
(setq display-line-numbers-type 'relative)

;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
                prog-mode-hook
    conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Override some modes
(dolist (mode '(org-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
**** Which-key
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package which-key
             :init (which-key-mode)
	     :diminish which-key-mode
	     :config
	     (setq which-key-idle-delay 0.5))
#+end_src
**** Dashboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts t)
    (setq dashboard-startup-banner 2)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-footer nil)
    (setq dashboard-items '((recents . 5)
    (bookmarks . 5)
    (projects . 5)
    (agenda . 5)
    (registers . 5)))
    (setq dashboard-week-agenda t))
#+end_src
**** Modeline
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package all-the-icons)
(use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-lsp t)
    (doom-modeline-github t)
    (doom-modeline-mu4e t))
#+end_src
**** Braces/Parenthesis/Delimiters
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
;; Highlight matching braces
(use-package paren
	:config
	(show-paren-mode 1))

(use-package smartparens
    :hook (prog-mode . smartparens-mode))

;; Colorful delimiters
(use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
    :defer t
    :hook (org-mode
			emacs-lisp-mode
			web-mode
			typescript-mode
			js2-mode))
#+end_src
**** Theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package twilight-bright-theme :defer t)
(use-package twilight-theme :defer t)
(load-theme 'twilight-bright t)
#+end_src
**** Completion
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ivy
      :diminish
      :init
      (ivy-mode 1)
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-wrap t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t))

  (use-package counsel
      :after ivy)

  (use-package wgrep)

  ;; Improves sorting for fuzzy-matched results
  (use-package flx
      :after ivy
      :defer t
      :init
      (setq ivy-flx-limit 10000))

  (use-package prescient
      :after counsel
      :config
      (prescient-persist-mode 1))

  (use-package ivy-prescient
      :after prescient
      :config
      (ivy-prescient-mode 1))

  (use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
      ("<tab>" . company-complete-selection))
      (:map lsp-mode-map
      ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.5)
      (add-hook 'evil-normal-state-entry-hook #'company-abort))

  (use-package company-box
      :hook (company-mode . company-box-mode))
#+end_src
**** Workspaces
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (use-package perspective
      :demand t
      :bind (("C-M-j" . persp-counsel-switch-buffer)
      ("C-M-k" . persp-switch)
      ("C-M-n" . persp-next)
      ("C-x k" . persp-kill-buffer*))
      :custom
      (persp-initial-frame-name "Main")
      :config
      ;; Running `persp-mode' multiple times resets the perspective list...
      (unless (equal persp-mode t)
        (persp-mode)))

  (hr/leader-key-def
    "b"  '(:ignore t :which-key "buffers")
    "bs" '(persp-counsel-switch-buffer :which-key "switch")
    "bk" '(persp-kill-buffer :which-key "kill")
    "w"  '(:ignore t :which-key "workspace")
    "ws" '(persp-switch :which-key "switch")
    "wn" '(persp-next :which-key "next"))
#+end_src
**** Distraction free writing
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package darkroom
		:hook (org-mode . darkroom-tentative-mode))
#+end_src
**** TODO Windows
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
;; Window management like in tmux
(use-package rotate)
#+end_src
**** TODO Buffers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package all-the-icons-ibuffer
:ensure t
:init (all-the-icons-ibuffer-mode 1))
#+end_src
*** Dired
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dired
    :straight nil
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

(use-package dired-single
    :commands (dired dired-jump))

(use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

(hr/leader-key-def
  "d" '(:ignore t :which-key "dired")
  "dd" '(dired :which-key "Here"))

#+end_src
*** Productivity
**** Spelling check
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src
**** Clean whitespace
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
      (prog-mode . ws-butler-mode)))
#+end_src
**** Snippets
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))
#+end_src
**** Emojis!
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
#+end_src
**** Commenting
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package evil-nerd-commenter
	:bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
*** Applications
**** Calendar
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package calfw
    :commands cfw:open-org-calendar)

(use-package calfw-org
    :after calfw
    :config
    (setq cfw:org-agenda-schedule-args '(:timestamp)))
#+end_src
**** Docker
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+end_src
**** RSS Feeds
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package elfeed
    :commands elfeed
    :bind ("C-x w" . elfeed)
    :config
    (setq elfeed-feeds
    '("https://reddit.com/r/emacs/.rss")))
#+end_src
**** OpenSCAD
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package scad-mode
    :defer t
    :config
    (autoload 'scad-mode "scad-mode" "A major mode for editing OpenSCAD code." t)
    (add-to-list 'auto-mode-alist '("\\.scad$" . scad-mode)))
#+end_src

*** Development
**** Git
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package magit-todos
  :defer t)

(use-package git-gutter
  :diminish
  :hook ((text-mode . git-gutter-mode)
         (prog-mode . git-gutter-mode))
  :config
  (setq git-gutter:update-interval 2))

(hr/leader-key-def
  "g" '(:ignore t :which-key "git")
  "gs" 'magit-status
  "gd" 'magit-diff-unstaged
  "gc" 'magit-branch-or-checkout
  "gl" '(:ignore t :which-key "log")
  "glc" 'magit-log-current
  "glf" 'magit-log-buffer-file
  "gb" 'magit-branch
  "gP" 'magit-push-current
  "gp" 'magit-pull-branch
  "gf" 'magit-fetch
  "gF" 'magit-fetch-all
  "gr" 'magit-rebase)
#+end_src
**** Projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/git")
  (setq projectile-project-search-path '("~/git")))
    (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

(hr/leader-key-def
  "p" '(:ignore t :which-key "projectile")
  "pf" 'counsel-projectile-find-file
  "ps" 'counsel-projectile-switch-project
  "pF" 'counsel-projectile-rg
  "pp" 'counsel-projectile
  "pc" 'projectile-compile-project
  "pd" 'projectile-dired)
#+end_src
**** Direnv
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package direnv
    :config
    (direnv-mode))
#+end_src
**** LSP
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package lsp-mode
    :commands lsp
    :hook ((typescript-mode js2-mode web-mode) . lsp)
    :bind (:map lsp-mode-map
    ("TAB" . completion-at-point)))

(use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover t)
    (setq lsp-ui-doc-position 'bottom)
    (ls-ui-doc-show))
#+end_src
**** Debug
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dap-mode)
#+end_src
**** Languages
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
;; Typescript
(use-package nvm :defer t)
(use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))

;; Svelte
(use-package svelte-mode
    :mode "\\.svelte\\'"
    :config
    (setq svelte-basic-offset 2)
    (setq svelte-tag-relative-indent t))

;; Vue
(use-package vue-mode
    :mode "\\.vue\\'")

;; JSX
(use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    ;; Use js2-mode for NodeJS scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Don't use the builtin syntax checking
    (setq js2-mode-show-strict-warnings nil))

;; Markdown
(use-package markdown-mode
    :mode "\\.md\\'"
    :config
    (setq markdown-command "marked"))

;; HTML
(use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

;; HTML colors
(use-package rainbow-mode
    :defer t
    :hook (org-mode
	emacs-lisp-mode
	typescript-mode
	js2-mode))

;; YAML
(use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+end_src
**** Code formatting
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package apheleia
    :config
    (apheleia-global-mode +1))

(use-package prettier-js
    :config
    (setq prettier-js-show-errors nil))
#+end_src
*** TODO Org-Mode
Not finished yet.
**** Vim keybindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package evil-org-mode
  :after org
  :hook ((org-mode . evil-org-mode)
    (org-agenda-mode . evil-org-mode)
    (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(hr/leader-key-def
  "o"   '(:ignore t :which-key "org mode")

  "oi"  '(:ignore t :which-key "insert")
  "oil" '(org-insert-link :which-key "insert link")

  "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

  "os"  '(dw/counsel-rg-org-files :which-key "search notes")

  "oa"  '(org-agenda :which-key "status")
  "ot"  '(org-todo-list :which-key "todos")
  "oc"  '(org-capture t :which-key "capture")
  "ox"  '(org-export-dispatch t :which-key "export"))
#+end_src
**** Tangle on save
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun hr/org-babel-tangle-dont-ask ()
(let ((org-confirm-babel-evaluate nil))
(org-babel-tangle)))

(add-hook 'org-mode-hook (lambda()
  (add-hook
    'after-save-hook #'hr/org-babel-tangle-dont-ask
    'run-at-end 'only-in-org-mode)))
#+end_src
**** Update TOCs on save
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src
**** Reminder
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-wild-notifier
:after org
:config
  (setq org-wild-notifier-keyword-whitelist nil)
  (setq org-wild-notifier-notification-title "Agenda Reminder")
  (setq org-wild-notifier-alert-time 15)
  (org-wild-notifier-mode))
#+end_src
**** Styling
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
**** TODO Roam
Not started yet.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
#+end_src
