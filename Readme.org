#+TITLE:My personal guix system configuration [in progress]
#+PROPERTY: header-args :tangle-mode
#+PROPERTY: header-args:sh :tangle-mode

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:
:CONTENTS:
- [[#programs][Programs]]
  - [[#mail][Mail]]
    - [[#imap-home][Imap (Home)]]
    - [[#imap-work][Imap (Work)]]
  - [[#emacs][Emacs]]
    - [[#package-management][Package management]]
    - [[#basic-settings][Basic settings]]
      - [[#personal-information][Personal information]]
      - [[#esc-cancels-all][ESC cancels all]]
      - [[#utf-8][UTF-8]]
      - [[#tabs][Tabs]]
      - [[#yes-or-no][Yes or no]]
      - [[#fill-column-to-80-characters][Fill column to 80 characters]]
      - [[#keep-emacsd-clean][Keep .emacs.d clean]]
      - [[#backup-files][Backup Files]]
      - [[#auto-save-files][Auto Save Files]]
      - [[#lock-files][Lock Files]]
      - [[#projectile-files][Projectile Files]]
      - [[#tramp][Tramp]]
      - [[#moving-deleted-files-to-trash][Moving deleted files to trash]]
      - [[#increase-undo-limit-10mb][Increase undo limit (10mb)]]
      - [[#handle-camelcase-as-seperate-words][Handle CamelCase as seperate words]]
      - [[#clipboard][Clipboard]]
      - [[#server][Server]]
    - [[#keybindings][Keybindings]]
      - [[#vim-keybindings][Vim keybindings]]
      - [[#leader-bindings][Leader bindings]]
    - [[#interface][Interface]]
      - [[#remove-distractions][Remove distractions]]
      - [[#line-numbers][Line numbers]]
      - [[#which-key][Which-key]]
      - [[#dashboard][Dashboard]]
      - [[#modeline][Modeline]]
      - [[#bracesparenthesisdelimiters][Braces/Parenthesis/Delimiters]]
      - [[#theme][Theme]]
      - [[#fonts][Fonts]]
      - [[#completion][Completion]]
      - [[#workspaces][Workspaces]]
      - [[#distraction-free-writing][Distraction free writing]]
      - [[#windows][Windows]]
      - [[#buffers][Buffers]]
      - [[#cursor-highlighting-effect][Cursor highlighting effect]]
      - [[#whitespaces][Whitespaces]]
      - [[#sync-theme][Sync theme]]
    - [[#dired][Dired]]
    - [[#productivity][Productivity]]
      - [[#alerts][Alerts]]
      - [[#spelling-check][Spelling check]]
      - [[#clean-whitespace][Clean whitespace]]
      - [[#snippets][Snippets]]
      - [[#emojis][Emojis!]]
      - [[#commenting][Commenting]]
      - [[#dictionary][Dictionary]]
      - [[#uml][UML]]
      - [[#vterm][Vterm]]
    - [[#applications][Applications]]
      - [[#calendar][Calendar]]
      - [[#docker][Docker]]
      - [[#rss-feeds][RSS Feeds]]
      - [[#openscad][OpenSCAD]]
      - [[#mail][Mail]]
      - [[#media][Media]]
    - [[#development][Development]]
      - [[#git][Git]]
      - [[#projectile][Projectile]]
      - [[#direnv][Direnv]]
      - [[#lsp][LSP]]
      - [[#translations][Translations]]
      - [[#debug][Debug]]
      - [[#languages][Languages]]
        - [[#emacs-lisp][Emacs Lisp]]
        - [[#typescript][Typescript]]
        - [[#svelte][Svelte]]
        - [[#vue][Vue]]
        - [[#javascript--jsx][JavaScript & JSX]]
        - [[#markdown][Markdown]]
        - [[#html][HTML]]
        - [[#css][CSS]]
        - [[#yaml][YAML]]
        - [[#json][JSON]]
      - [[#code-formatting][Code formatting]]
      - [[#graphql][GraphQL]]
      - [[#snippets][Snippets]]
        - [[#svelte][Svelte]]
        - [[#css][CSS]]
          - [[#background][Background]]
    - [[#org-mode][Org-Mode]]
      - [[#basic-settings][Basic settings]]
      - [[#vim-keybindings][Vim keybindings]]
      - [[#tangle-on-save][Tangle on save]]
      - [[#update-tocs-on-save][Update TOCs on save]]
      - [[#reminder][Reminder]]
      - [[#styling][Styling]]
      - [[#graphs][Graphs]]
      - [[#scrum][Scrum]]
      - [[#drag--drop][Drag & Drop]]
      - [[#roam][Roam]]
      - [[#calendar-sync][Calendar sync]]
      - [[#snippets][Snippets]]
        - [[#author][Author]]
        - [[#date][Date]]
        - [[#e-mail][E-Mail]]
        - [[#source-blocks][Source blocks]]
        - [[#image][Image]]
        - [[#table][Table]]
        - [[#uml][UML]]
        - [[#video][Video]]
        - [[#lisp][Lisp]]
      - [[#templates][Templates]]
  - [[#dunst][Dunst]]
  - [[#direnv][Direnv]]
  - [[#autostart][Autostart]]
  - [[#bspwm][Bspwm]]
  - [[#polybar][Polybar]]
    - [[#settings][Settings]]
    - [[#widgetsscripts][Widgets/Scripts]]
      - [[#unread-mails-widget][Unread mails widget]]
  - [[#sxhkd][Sxhkd]]
  - [[#zathura][Zathura]]
  - [[#zsh][zsh]]
  - [[#xinitrc][xinitrc]]
  - [[#nyxt][Nyxt]]
    - [[#init][Init]]
    - [[#style][Style]]
    - [[#search-engines][Search Engines]]
    - [[#desktop-file][Desktop file]]
- [[#default-applications][Default applications]]
- [[#scripts][Scripts]]
  - [[#dmenu][Dmenu]]
  - [[#listen-to-monitor-changes][Listen to monitor changes]]
  - [[#generate-wallpaper][Generate wallpaper]]
:END:

* Programs
** Mail
*** Imap (Home)
#+begin_src conf :tangle (if (string= (system-name) "fedora") "~/.mbsyncrc" "no")
  IMAPAccount gmail
  Host imap.gmail.com
  User mail@henn1nk.com
  PassCmd "pass mail/mail@henn1nk.com"
  SSLType IMAPS
  SSLVersions TLSv1.2
  CertificateFile /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem

  IMAPAccount zoho
  Host imap.zoho.com
  User hi@hendrikroth.com
  PassCmd "pass mail/hi@hendrikroth.com"
  SSLType IMAPS
  SSLVersions TLSv1.2
  CertificateFile /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem

  IMAPStore gmail-remote
  Account gmail

  IMAPStore zoho-remote
  Account zoho

  MaildirStore gmail-local
  Path ~/mail/mail@henn1nk.com/
  Inbox ~/mail/mail@henn1nk.com/INBOX
  Trash ~/mail/mail@henn1nk.com/Trash
  Subfolders Verbatim

  MaildirStore zoho-local
  Path ~/mail/hi@hendrikroth.com/
  Inbox ~/mail/hi@hendrikroth.com/INBOX
  Trash ~/mail/hi@hendrikroth.com/Trash
  Subfolders Verbatim

  Channel gmail
  Far :gmail-remote:
  Near :gmail-local:
  Patterns *
  Create Near
  Expunge None
  CopyArrivalDate yes
  SyncState *

  Channel zoho
  Far :zoho-remote:
  Near :zoho-local:
  Patterns *
  Create Near
  Expunge None
  CopyArrivalDate yes
  SyncState *
#+end_src
*** Imap (Work)
#+begin_src conf :tangle (if (string= (system-name) "work") "~/.mbsyncrc" "no")
  IMAPAccount work
  Host imap.todo.com
  User todo
  PassCmd "pass mail/todo"
  SSLType IMAPS
  SSLVersions TLSv1.2
  CertificateFile /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
  PipelineDepth 1

  IMAPStore work-remote
  Account work

  MaildirStore work-local
  Path ~/mail/work/
  Inbox ~/mail/work/INBOX
  Trash ~/mail/work/Trash
  Subfolders Verbatim

  Channel work
  Far :work-remote:
  Near :work-local:
  Patterns *
  Create Near
  Expunge None
  CopyArrivalDate yes
  SyncState *
#+end_src
** Emacs
*** Package management
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
*** Basic settings
**** Personal information
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq user-full-name "Hendrik Roth")
  (setq user-mail-address "hi@hendrikroth.com")
#+end_src
**** ESC cancels all
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
**** UTF-8
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (set-default-coding-systems 'utf-8)
#+end_src
**** Tabs
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
  (setq-default indent-tabs-mode nil)
#+end_src
**** Yes or no
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
**** Fill column to 80 characters
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq-default fill-column 80)
#+end_src
**** Keep .emacs.d clean
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs"))
  (use-package no-littering)
#+end_src
**** Backup Files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (make-directory (expand-file-name "tmp/backups/" user-emacs-directory) t)
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src
**** Auto Save Files
Don't create =#Name.file#= files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src
**** Lock Files
Don't create =.#Name.file= files.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq create-lockfiles nil)
#+end_src
**** Projectile Files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq projectile-known-projects-file (expand-file-name "tmp/projectile-bookmarks.eld" user-emacs-directory)
        lsp-session-file (expand-file-name "tmp/.lsp-session-v1" user-emacs-directory))
#+end_src
**** Tramp
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq tramp-default-method "ssh")
#+end_src
**** Moving deleted files to trash
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq-default delete-by-moving-to-trash t)
#+end_src
**** Increase undo limit (10mb)
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq undo-limit 10000000)
#+end_src
**** Handle CamelCase as seperate words
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (global-subword-mode 1)
#+end_src
**** Clipboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq-default select-enable-clipboard t)
#+end_src
**** Server
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(server-start)
#+end_src
*** Keybindings
**** Vim keybindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

  (use-package evil
    :after undo-tree
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll nil)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode-buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :init
    :config
    (evil-collection-init))
#+end_src
**** Leader bindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer hr/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer hr/ctrl-c-keys
      :prefix "C-c"))
#+end_src
*** Interface
**** Remove distractions
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq inhibit-startup-message t)
  (setq-default inhibit-startup-screen t)
  (setq-default inhibit-scratch-message "")

  (scroll-bar-mode -1) ; Disable visual scrollbar
  (tool-bar-mode -1) ; Disable toolbar
  (tooltip-mode -1) ; Disable tooltips
  (menu-bar-mode -1) ; Disable menu bar

  (setq visible-bell t) ; Visual bell
#+end_src
**** Line numbers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (column-number-mode)

  ;; Relative line numbers
  (setq display-line-numbers-type 'relative)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
**** Which-key
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0)
      (setq which-key-idle-secondary-delay 0))
#+end_src
**** Dashboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts t)
    (setq dashboard-startup-banner 2)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-footer nil)
    (setq dashboard-items '((recents . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (setq dashboard-week-agenda t))
#+end_src
**** Modeline
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package all-the-icons)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-lsp t)
    (doom-modeline-github t)
    (doom-modeline-mu4e t))
#+end_src
**** Braces/Parenthesis/Delimiters
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; Highlight matching braces
  (use-package paren
    :config
    (setq show-paren-delay 0)
    (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
    (show-paren-mode 1))

  ;; Colorful delimiters
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;;(use-package smartparens
  ;;  :hook (prog-mode . smartparens-mode))

  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))
#+end_src
**** Theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package twilight-bright-theme :ensure :defer)
  (straight-use-package '(twilight-anti-bright-theme
                          :ensure :defer :type git :host github
                          :repo "jimeh/twilight-anti-bright-theme"))

  (use-package circadian
    :ensure t
    :config
    (setq calendar-latitude 51.5)
    (setq calendar-longitude 7.5)
    (setq circadian-themes '((:sunrise . twilight-bright)
                             (:sunset . twilight-anti-bright)))
    (circadian-setup)
    :custom
    (add-hook 'circadian-after-load-theme-hook
              #'(lambda (twilight-anti-bright)
                  (set-face-foreground 'linum "#F52503")))
    (add-hook 'circadian-after-load-theme-hook
              #'(lambda (twilight-bright)
                  (set-face-foreground 'linum "#F52503"))))
#+end_src
**** Fonts
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (set-face-attribute 'default nil :font "Fira Code" :height 110)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 110)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "ETBookOT" :height 140 :weight 'bold)
#+end_src
**** Completion
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package vertico
    :ensure t
    :straight '(vertico :host github :repo "minad/vertico" :branch "main")
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-j" . vertico-previous)
                ("C-f" . vertico-exit-input)
                ("C-l" . vertico-exit-input)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  ;; Completions in regions
  (use-package corfu
    :straight '(corfu :host github :repo "minad/corfu")
    :bind(:map corfu-map
               ("C-j" . corfu-next)
               ("C-k" . corfu-previous)
               ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    :config
    (corfu-global-mode))

  ;; Improved candidate filtering
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  (use-package consult
    :demand t)

  (use-package marginalia
    :ensure t
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annnotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

  (hr/leader-key-def
    "s" '(:ignore t :which-key "search")
    "sl" '(consult-line :which-key "search line")
    "si" '(consult-imenu :which-key "search item/topic")
    "sp" '(consult-git-grep :which-key "search in project")
    )
#+end_src
**** Workspaces
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package perspective
    :demand t
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))

  (hr/leader-key-def
    "b"  '(:ignore t :which-key "buffers")
    "bs" '(consult-buffer :which-key "switch buffer")
    "bk" '(persp-kill-buffer :which-key "kill buffer")
    "W"  '(:ignore t :which-key "workspace")
    "Ws" '(persp-switch :which-key "switch")
    "Wn" '(persp-next :which-key "next"))
#+end_src
**** Distraction free writing
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package darkroom
    :hook (org-mode . darkroom-tentative-mode)
    :config
    (setq darkroom-text-scale-increase 0))
#+end_src
**** Windows
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ace-window
    :ensure t)

  (hr/leader-key-def
    "w"  '(:ignore t :which-key "windows")
    "ws" '(ace-window :which-key "select window")
    "wh" '(windmove-left :which-key "left")
    "wj" '(windmove-down :which-key "down")
    "wk" '(windmove-up :which-key "up")
    "wl" '(windmove-right :which-key "right")
    "wz" '(split-window-vertically :which-key "split vertically")
    "wx" '(split-window-horizontally :which-key "split horizontally")
    "wc" '(delete-window :which-key "close window"))
#+end_src
**** Buffers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package all-the-icons-ibuffer
    :ensure t
    :init (all-the-icons-ibuffer-mode 1))
#+end_src
**** Cursor highlighting effect
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package beacon
    :ensure t
    :init (beacon-mode 1))
#+end_src
**** Whitespaces
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'whitespace)
#+end_src
**** Sync theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package theme-magic)
#+end_src
*** Dired
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package dired
    :straight nil
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (hr/leader-key-def
    "d" '(:ignore t :which-key "dired")
    "dd" '(dired :which-key "Here"))

#+end_src
*** Productivity
**** Alerts
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'notifications))
#+end_src
**** Spelling check
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src
**** Clean whitespace
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src
**** Snippets
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package yasnippet
    :hook ((prog-mode . yas-minor-mode)
           (org-mode . yas-minor-mode))
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-reload-all))
#+end_src
**** Emojis!
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
#+end_src
**** Commenting
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

  (hr/leader-key-def
    "/" '(evilnc-comment-or-uncomment-lines :which-key "comment"))
#+end_src
**** Dictionary
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package define-word)
  (hr/leader-key-def
    "." '(define-word-at-point :which-key "word definition"))
#+end_src
**** UML
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package plantuml-mode
    :ensure t
    :mode ("\\.plantuml\\'" "\\.puml")
    :config
    (setq plantuml-default-exec-mode 'executable)
    ;;(setq plantuml-executable-path (shell-command-to-string "echo -n which plantuml"))
    (setq plantuml-executable-path "/usr/bin/plantuml")
    (setq plantuml-output-type "svg")
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))

  (use-package flycheck-plantuml
    :after plantuml-mode
    :config (flycheck-plantuml-setup))
#+end_src
**** Vterm
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))
#+end_src
*** Applications
**** Calendar
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package calfw
    :commands cfw:open-org-calendar)

(use-package calfw-org
    :after calfw
    :config
    (setq cfw:org-agenda-schedule-args '(:timestamp)))

(hr/leader-key-def
  "C" '(cfw:open-org-calendar :which-key "calendar"))
#+end_src
**** Docker
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package docker
    :ensure t
    :bind ("C-c d" . docker))

(hr/leader-key-def
  "D" '(docker :which-key "docker"))
#+end_src
**** RSS Feeds
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package elfeed
      :commands elfeed
      :bind ("C-x w" . elfeed)
      :config
      (add-to-list 'evil-motion-state-modes 'elfeed-search-mode)
      (add-to-list 'evil-motion-state-modes 'elfeed-show-mode)

      (evil-define-key* 'motion elfeed-search-mode-map
        "gb" #'elfeed-search-browse-url
        "gr" #'elfeed-search-update--force
        "gR" #'elfeed-seach-fetch)

      (evil-define-key* 'motion elfeed-show-mode-map
        "gb" #'elfeed-show-visit
        "gj" #'elfeed-show-next
        "gk" #'elfeed-show-prev))

  (use-package elfeed-org
    :config
    (setq rmh-elfeed-org-files (list "./RSS.org")))

  (use-package elfeed-dashboard
    :ensure t
    :config
    (setq elfeed-dashboard-file "./RSS-Dashboard.org")
    (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))

  (hr/leader-key-def
    "R" '(elfeed :which-key "elfeed"))
#+end_src
**** OpenSCAD
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package scad-mode
    :defer t
    :config
    (autoload 'scad-mode "scad-mode" "A major mode for editing OpenSCAD code." t)
    (add-to-list 'auto-mode-alist '("\\.scad$" . scad-mode)))
#+end_src
**** Mail
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package mu4e
    :defer 20
    :config
      (require 'org-mu4e)
      (setq mu4e-update-interval (* 10 60))
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-maildir "~/mail")
      (setq mu4e-change-filenames-when-moving t)

      (if (string= (system-name) "work")
        (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "hendrik.roth@booomtown.de"
            :match-func (lambda (msg)
                        (when msg (string-prefix-p "/hendrik.roth@booomtown.de" (mu4e-message-field msg :maildir))))
            :vars '(
              (user-full-name . "Hendrik Roth")
              (user-mail-address . "hendrik.roth@booomtown.de")
              (mu4e-sent-folder . "/hendrik.roth@booomtown.de/Sent Items")
              (mu4e-trash-folder . "/hendrik.roth@booomtown.de/Trash")
              (mu4e-drafts-folder . "/hendrik.roth@booomtown.de/Drafts")
              (mu4e-refile-folder . "/hendrik.roth@booomtown.de/Archive")
              (mu4e-sent-messages-behavior . sent)
        ))))
        (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "mail@henn1nk.com"
            :match-func (lambda (msg)
                        (when msg (string-prefix-p "/mail@henn1nk.com" (mu4e-message-field msg :maildir))))
            :vars '(
              (user-full-name . "Hendrik Roth")
              (user-mail-address . "mail@henn1nk.com")
              (mu4e-sent-folder . "/mail@henn1nk.com/Sent Items")
              (mu4e-trash-folder . "/mail@henn1nk.com/Trash")
              (mu4e-drafts-folder . "/mail@henn1nk.com/Drafts")
              (mu4e-refile-folder . "/mail@henn1nk.com/Archive")
              (mu4e-sent-messages-behavior . sent)
        ))
        ,(make-mu4e-context
            :name "hi@hendrikroth.com"
            :match-func (lambda (msg)
                        (when msg (string-prefix-p "/hi@hendrikroth.com" (mu4e-message-field msg :maildir))))
            :vars '(
              (user-full-name . "Hendrik Roth")
              (user-mail-address . "hi@hendrikroth.com")
              (mu4e-sent-folder . "/hi@hendrikroth.com/Sent")
              (mu4e-trash-folder . "/hi@hendrikroth.com/Trash")
              (mu4e-refile-folder . "/hi@hendrikroth.com/Archive")
              (mu4e-sent-messages-behavior . sent)
            ))
        ))
    )

    (setq mu4e-context-policy 'pick-first)

    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses 't)

    (setq mu4e-compose-dont-reply-to-self t)

    (setq mail-user-agent 'mu4e-user-agent
      message-send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server "smtp.zoho.eu"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl)

    (if (string= (system-name) "work")
      (setq mu4e-maildir-shortcuts
        '(("/hendrik.roth@booomtown.de/INBOX" . ?i)
        ("/hendrik.roth@booomtown.de/Lists/*" . ?l)
        ("/hendrik.roth@booomtown.de/Sent Mail" . ?s)
        ("/hendrik.roth@booomtown.de/Trash" . ?t)))

      (setq mu4e-maildir-shortcuts
        '(("/hi@hendrikroth.com/INBOX" . ?i)
        ("/hi@hendrikroth.com/Lists/*" . ?l)
        ("/hi@hendrikroth.com/Sent Mail" . ?s)
        ("/hi@hendrikroth.com/Trash" . ?t)))
    )

    (if (string= (system-name) "work")
      (add-to-list 'mu4e-bookmarks
        (make-mu4e-bookmark
          :name "All Inboxes"
          :query "maildir:/hendrik.roth@booomtown.de/INBOX"
          :key ?i))

      (add-to-list 'mu4e-bookmarks
        (make-mu4e-bookmark
          :name "All Inboxes"
          :query "maildir:/mail@henn1nk.com/INBOX OR maildir:/hi@hendrikroth.com/INBOX"
          :key ?i))
    )

    (setq message-kill-buffer-on-exit t)

    (setq hr/mu4e-inbox-query
      "(maildir:/Henn1nk/INBOX OR maildir:/Personal/INBOX) AND flag:unread")

    (defun hr/go-to-inbox ()
      (interactive)
        (mu4e-headers-search hr/mu4e-inbox-query))

    (hr/leader-key-def
      "M" '(:ignore t :which-key "mail")
      "Mm" 'mu4e
      "Mc" 'mu4e-compose-new
      "Mi" 'hr/go-to-inbox
      "Ms" 'mu4e-update-mail-and-index)

    (mu4e t))
#+end_src

Mail alerts..
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package mu4e-alert
  :after mu4e
  :config
    (setq mu4e-alert-intersting-mail-query hr/mu4e-inbox-query)
    (setq mu4e-alert-notify-repeated-mails nil)
    (mu4e-alert-enable-notifications))
#+end_src
**** Media
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package playerctl)

  (hr/leader-key-def
    "m" '(:ignore t :which-key "media control")
    "mt" '(playerctl-play-pause-song :which-key "play/pause")
    "mn" '(playerctl-next-song :which-key "next song")
    "mp" '(playerctl-previous-song :which-key "previous song")
    "mf" '(playerctl-seek-forward :which-key "seek forward")
    "mb" '(playerctl-seek-backward :which-key "seek backward"))
#+end_src
*** Development
**** Git
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package magit-todos
    :defer t)

  (use-package git-gutter
    :diminish
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 2))

  (hr/leader-key-def
    "g" '(:ignore t :which-key "git")
    "gs" 'magit-status
    "gd" 'magit-diff-unstaged
    "gc" 'magit-branch-or-checkout
    "gi" 'magit-init
    "gl" '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb" 'magit-branch
    "gP" 'magit-push-current
    "gp" 'magit-pull-branch
    "gf" 'magit-fetch
    "gF" 'magit-fetch-all
    "gr" 'magit-rebase)
#+end_src
**** Projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'vertico))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/git")
  (setq projectile-project-search-path '("~/git")))
    (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

(hr/leader-key-def
  "p" '(:ignore t :which-key "projectile")
  "pi" 'consult-imenu
  "pf" 'counsel-projectile-find-file
  "ps" 'counsel-projectile-switch-project
  "pF" 'counsel-projectile-rg
  "pp" 'counsel-projectile
  "pc" 'projectile-compile-project
  "pd" 'projectile-dired)
#+end_src
**** Direnv
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package direnv
    :config
    (direnv-mode))
#+end_src
**** LSP
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package lsp-mode
  :commands lsp
  :hook ((typescript-mode js2-mode web-mode) . lsp)
  :bind (:map lsp-mode-map
    ("TAB" . completion-at-point)))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover t)
    (setq lsp-ui-doc-position 'bottom)
    (ls-ui-doc-show))

(hr/leader-key-def
  "l" '(:ignore t :which-key "lsp")
  "ld" 'xref-find-definitions
  "lr" 'xref-find-references
  "ln" 'lsp-ui-find-next-reference
  "lp" 'lsp-ui-find-prev-reference
  "ls" 'counsel-imenu
  "le" 'lsp-ui-flycheck-list
  "lS" 'lsp-ui-sideline-mode
  "lX" 'lsp-execute-code-action)
#+end_src
**** Translations
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package google-translate
  :ensure t
  :config
  (require 'google-translate-default-ui)
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  (setq google-translate-backend-method 'curl)
  (setq google-translate-default-source-language "de")
  (setq google-translate-default-target-language "en"))

(hr/leader-key-def
  "t" '(:ignore t :which-key "translations")
  "tc" 'google-translate-at-point-reverse
  "tq" 'google-translate-query-translate)
#+end_src
**** Debug
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dap-mode)
#+end_src
**** Languages
***** Emacs Lisp
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

(use-package helpful
  :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
  :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

(hr/leader-key-def
  "e" '(:ignore t :which-key "eval")
  "eb" '(eval-buffer :whch-key "eval buffer"))

(hr/leader-key-def
  :keymaps '(visual)
  "er" '(eval-region :which-key "eval region"))
#+end_src
***** Typescript
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package nvm :defer t)
  (use-package typescript-mode
      :ensure nil
      :mode "\\.ts\\'"
      :config
      (setq typescript-indent-level 2))
#+end_src
***** Svelte
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package svelte-mode
      :ensure nil
      :mode "\\.svelte\\'"
      :config
      (setq svelte-basic-offset 2)
      (setq svelte-tag-relative-indent t))
#+end_src
***** Vue
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package vue-mode
      :ensure nil
      :mode "\\.vue\\'")
#+end_src
***** JavaScript & JSX
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package js2-mode
      :ensure nil
      :mode "\\.js?\\|\\.jsx?\\'"
      :custom
      (js-indent-level 2)
      (js-switch-indent-offset 2)
      (js2-highlight-level 3)
      (js2-idle-timer-delay 0)
      :config
      ;; Use js2-mode for NodeJS scripts
      (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

      ;; Don't use the builtin syntax checking
      (setq js2-mode-show-strict-warnings nil))
#+end_src
***** Markdown
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package markdown-mode
      :ensure nil
      :mode "\\.md\\'"
      :config
      (setq markdown-command "marked"))
#+end_src
***** HTML
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; HTML
  (use-package web-mode
      :ensure nil
      :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
      :config
      (setq-default web-mode-code-indent-offset 2)
      (setq-default web-mode-markup-indent-offset 2)
      (setq-default web-mode-attribute-indent-offset 2))

  ;; HTML colors
  (use-package rainbow-mode
    :defer t
    :hook (org-mode
      emacs-lisp-mode
      typescript-mode
      js2-mode))

    ;; Emmet
  (use-package emmet-mode
    :hook
      (css-mode . emmet-mode)
      (html-mode . emmet-mode)
      (svelte-mode . emmet-mode)
      (typescript-mode . emmet-mode)
      (js2-mode . emmet-mode)
      (web-mode . emmet-mode))
#+end_src
***** CSS
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package css-mode
    :ensure nil
    :custom (css-indent-offset 2))
#+end_src
***** YAML
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+end_src
***** JSON
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package json-mode
    :mode "\\.json\\'")
#+end_src
**** Code formatting
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package apheleia
    :config
    (apheleia-global-mode +1))

(use-package prettier-js
    :config
    (setq prettier-js-show-errors nil))
#+end_src
**** GraphQL
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package graphql-doc
  :straight '(graphql-doc :type git :host github :repo "ifitzpatrick/graphql-doc.el")
  :config
  (graphql-doc-add-api "vivid" `(:url "http://localhost:8999/graphql" :data nil :headers nil)))

(hr/leader-key-def
  "G" '(:ignore t :which-key "graphlql")
  "Ge" 'graphql-doc :which-key "open endpoint"
  "Gu" 'graphql-doc-open-url :which-key "open url")
#+end_src

**** Snippets
***** Svelte
#+begin_src html :mkdirp yes :tangle ~/.emacs.d/snippets/svelte/svelte
# -*- mode: snippet -*-
# name: svelte
# key: /svelte
# --
<script lang="ts">
$0
</script>

$1

<style lang="postcss">
$2
</style>
#+end_src
***** CSS
****** Background
#+begin_src html :mkdirp yes :tangle ~/.emacs.d/snippets/css/background-color
# -*- mode: snippet -*-
# name: background-color
# key: /bg
# --
background-color: #${0:DDD};
#+end_src
*** Org-Mode
**** Basic settings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun hr/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    :defer t
    :hook ((org-capture-mode-hook . evil-insert-state)
            (org-mode . hr/org-mode-setup))
    :config
      (setq org-edit-src-content-indention 0)
      (setq org-hidden-keywords '(title))
      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-hide-emphasis-markers t)
      (setq org-startup-with-inline-images t)
      (setq org-plantuml-jar-path (expand-file-name "~/plantuml.jar"))
      (setq org-latex-toc-command "\\tableofcontents \\clearpage")

      (setq org-agenda-files
          '("~/notes/tasks.org"))

      (setq org-tag-alist
          '((:startgroup)
            (:endgroup)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("idea" . ?i)))

      (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(@w/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
    :custom
      (org-startup-folded 'content)
      (org-startup-truncated nil))

    (with-eval-after-load 'org (org-babel-do-load-languages 'org-babel-load-languages '(
                                (gnuplot . t)
                                (plantuml . t)
                                )))

    (eval-after-load 'org (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src
**** Vim keybindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

  (defun hr/search-org-files ()
    (interactive)
    (counsel-rg "" "~/notes" nil "Search notes:"))

  (defun hr/org-babel-execute-src-block ()
    (interactive)
    (let ((org-confirm-babel-evaluate nil))
    (org-babel-execute-src-block)))

  (hr/leader-key-def
    "o"   '(:ignore t :which-key "org mode")

    "oi"  '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :which-key "insert link")

    "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

    "os"  '(hr/search-org-files :which-key "search notes")

    "oa"  '(org-agenda :which-key "status")
    "ot"  '(org-todo-list :which-key "todos")
    "oc"  '(org-capture t :which-key "capture")
    "oe"  '(hr/org-babel-execute-src-block :which-key "execute block")
    "ox"  '(org-export-dispatch t :which-key "export"))
#+end_src
**** Tangle on save
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun hr/org-babel-tangle-dont-ask ()
(let ((org-confirm-babel-evaluate nil))
(org-babel-tangle)))

(add-hook 'org-mode-hook (lambda()
  (add-hook
    'after-save-hook #'hr/org-babel-tangle-dont-ask
    'run-at-end 'only-in-org-mode)))
#+end_src
**** Update TOCs on save
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src
**** Reminder
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-wild-notifier
:after org
:config
  (setq org-wild-notifier-keyword-whitelist nil)
  (setq org-wild-notifier-notification-title "Agenda Reminder")
  (setq org-wild-notifier-alert-time 15)
  (org-wild-notifier-mode))
#+end_src
**** Styling
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(set-face-attribute 'org-document-title nil :font "ETBookOT" :weight 'bold :height 2.2)
(dolist (face '((org-level-1 . 1.5)
  (org-level-2 . 1.4)
  (org-level-3 . 1.25)
  (org-level-4 . 1.20)
  (org-level-5 . 1.1)
  (org-level-6 . 1.1)
  (org-level-7 . 1.1)
  (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "ETBookOT" :slant 'italic :height (cdr face)))

(require 'org-indent)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+end_src
**** Graphs
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package gnuplot
  :ensure t)
#+end_src
**** Scrum
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-scrum
  :after org)
#+end_src
**** Drag & Drop
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-download
  :hook (dired-mode-hook . org-download-enable))
#+end_src
**** Roam
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-roam
  :ensure t
  :hook
    (after-init . org-roam-mode)
  :custom
    (org-roam-directory "~/notes/roam")
    (org-roam-completion-everywhere t)
    (org-roam-system 'ivy))
#+end_src
**** Calendar sync
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-caldav
  :defer t
  :init
  (setq org-caldav-url ""
    org-caldav-inbox nil
    org-caldav-delete-org-entries 'always
    org-caldav-delete-calendar-entries 'never
    org-caldav-calendars
    '((:calendar-id ""
       :inbox "~/notes/calendar/personal.org")
      (:calendar-id ""
       :inbox "~/notes/calendar/work.org"))))
#+end_src
**** Snippets
***** Author
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/author
# -*- mode: snippet -*-
# name: author
# key: /author
# --
#+author: ${1:`user-full-name`}
#+email: ${2:`user-mail-address`}
#+end_src
***** Date
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/date
# -*- mode: snippet -*-
# name: date
# key: /date
# --
#+date: ${1:date}/${2:month}/${3:day}
#+end_src
***** E-Mail
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/email
# -*- mode: snippet -*-
# name: email
# key: /email
# --
#+email: ${1:`user-mail-address`}
#+end_src
***** Source blocks
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/src
# -*- mode: snippet -*-
# name: src
# key: /src
# --
,#+begin_src ${1:emacs-lisp} :tangle $2
$3
,#+end_src
#+end_src
***** Image
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/image
# -*- mode: snippet -*-
# name: image
# key: /image
# --
#+caption ${1:caption of the image}
[[file:${2:image_path}]]$0
#+end_src
***** Table
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/table
# -*- mode: snippet -*-
# name: table
# key: /table
# --
#+caption: ${1:caption of the table}
| ${2:column 1} | ${3:column 2} |
+---------------+---------------+
#+end_src
***** UML
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/uml
# -*- mode: snippet -*-
# name: uml
# key: /uml
# --
,#+begin_src plantuml :file $1.png
@startuml
skinparam backgroundcolor transparent
skinparam monochrome true
skinparam shadowing false
skinparam actorStyle awesome
$2
@enduml
,#+end_src
#+end_src

***** Video
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/video
# -*- mode: snippet -*-
# name: video
# key: /video
# --
[[${1:link of the video}][file:${2:link of the image}]
#+end_src
***** Lisp
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/emacs-lisp
# -*- mode: snippet -*-
# name: emacs-lisp
# key: /lisp
# --
,#+begin_src emacs-lisp :tangle yes
$1
,#+end_src
#+end_src

**** Templates
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun get-org-target () (read-file-name "File: " org-directory))

  (setq org-capture-templates
        '(("w" "Work")
        ("ws" "Sprint" checkitem (file+headline "~/notes/work/Sprint.org" "Next") "* TODO %?\n %i\n %a")
        ("wS" "Specification sheet" entry (file get-org-target) "* THIS IS A TEMPLATE")
        ("p" "Personal")
        ("ps" "Shopping" checkitem (file+headline "~/notes/personal/Shopping.org" "Next") "- [ ] %?\n")))
#+end_src
** Dunst
#+begin_src bash :mkdirp yes :tangle ~/.config/wal/templates/dunstrc
  [global]
  geometry = "200x50-20-20"
  seperator_height = 0
  padding = 10
  horizontal_padding = 10
  frame_color = "{color4}"
  frame_width = 2
  idle_threshold = 0
  font = Fira Mono 10
  alignment = left
  word_wrap = yes
  format = "<b>%s</b>: %b"
  markup = full
  transparency = 60
  browser = "/usr/bin/chromium-browser"

  [urgency_low]
  background = "{background}"
  foreground = "{foreground}"

  [urgency_normal]
  background = "{background}"
  foreground = "{foreground}"

  [urgency_critical]
  background = "{background}"
  foreground = "{foreground}"
#+end_src
** Direnv
Usage in projects =.envrc=:
=use nodejs 14=

#+begin_src bash :tangle ~/.direnvrc
  use_nodejs() {
      NODE_VERSION="$1"
      type nvm > /dev/null 2>&1 || . "${NVM_DIR}/nvm.sh"
      nvm use "$NODE_VERSION"
  }
#+end_src
** Autostart
#+begin_src bash :mkdirp yes :tangle ~/.config/autostart
  #!/usr/bin/sh
  wal -Rq

  if [ -f "${HOME}/.cache/wal/colors.sh" ]; then
    . "${HOME}/.cache/wal/colors.sh"

    mkdir -p "${HOME}/.config/dunst"
    mkdir -p "${HOME}/.config/zathura"

    ln -sf "${HOME}/.cache/wal/dunstrc" "${HOME}/.config/dunst/dunstrc"
    ln -sf "${HOME}/.cache/wal/zathurarc" "${HOME}/.config/zathura/zathurarc"

    if [ -f "${HOME}/.config/scripts/generate_wallpaper" ]; then
        \. "${HOME}/.config/scripts/generate_wallpaper"
    fi
  fi

  xsetroot -solid "$color0" -cursor_name left_ptr
  feh --bg-fill --conversion-timeout 10 ~/.wallpaper &
  xset s 300 5
  xss-lock -- xsecurelock &

  pkill autorandr
  autorandr --change &

  pkill sxhkd
  sxhkd &

  pkill polybar
  polybar main &

  pkill dunst
  dunst &

  pkill udiskie
  udiskie &

  playerctld daemon &

  emacs --daemon &
  nyxt &
#+end_src
** Bspwm
#+begin_src bash :mkdirp yes :tangle ~/.config/bspwm/bspwmrc :tangle-mode (identity #o755)
  #!/usr/bin/sh
  . "${HOME}/.config/autostart"

  bspc monitor -d "1" "2" "3" "4" "5" "6" "7" "8" "9" "0"

  bspc config border_width         2
  bspc config window_gap           0

  bspc config split_ratio          0.52
  bspc config borderless_monocle   true
  bspc config gapless_monocle      true

  bspc config normal_border_color "$color1"
  bspc config active_border_color "$color2"
  bspc config focused_border_color "$color3"
  bspc config presel_feedback_color "$color1"

  bspc desktop 0 --layout monocle
  bspc desktop 1 --layout monocle

  bspc rule -a Emacs desktop=^1 state=tiled focus=on follow=on manage=on
  bspc rule -a Nyxt desktop=^10 manage=on focus=off follow=off
  bspc rule -a Chromium-browser desktop=^9 manage=on focus=off follow=off
  bspc rule -a Firefox desktop=^9 manage=on focus=off follow=off
  bspc rule -a Pavucontrol state=floating sticky=on rectangle=400x300+100+100

  . "${HOME}/.config/scripts/bspwm_workspaces"
#+end_src
** Polybar
*** Settings
For finding & pasting icon codes: https://mathew-kurian.github.io/CharacterMap
Some modules don't support click events, workaround: https://github.com/polybar/polybar/wiki/Formatting#action-a
#+begin_src bash :mkdirp yes :tangle ~/.config/polybar/config
  [global/wm]
  margin-bottom = 0

  [colors]
  background = ${xrdb:color0:#222}
  foreground = ${xrdb:color7:#222}
  foreground-alt = ${xrdb:color7:#222}
  primary = ${xrdb:color1:#222}
  secondary = ${xrdb:color2:#222}
  alert = ${xrdb:color3:#222}

  [bar/main]
  background = ${colors.background}
  foreground = ${colors.foreground}
  monitor =
  monitor-strict = false
  monitor-exact = true
  bottom = false
  fixed-center = true
  offset-x = 0
  offset-y = 0
  padding = 0
  padding-right = 1
  module-margin = 1
  modules-left = bspwm
  modules-center = title
  modules-right = pulseaudio date menu-apps
  tray-position = right
  scroll-up = #bspwm.prev
  scroll-down = #bspwm.next
  font-0 = "Fira Code:size=8;0"
  font-1 = "Roboto:size=11:weight=bold;2"
  font-2 = "Noto Sans:size=11;1"
  font-3 = "Material Icons Outlined:8;2"
  font-4 = "Material Icons Round:8;2"
  
  [module/bspwm]
  type = internal/bspwm
  pin-workspaces = true
  enable-click = true
  enable-scoll = true
  fuzzy-match = true
  label-focused-foreground = ${colors.secondary}

  [module/title]
  type = internal/xwindow
  format = <label>
  label = %title%
  label-maxlen = 30

  [module/date]
  type = internal/date
  interval = 1.0
  date = %Y/%m/%d
  time = %H:%M
  date-alt = %A, %d %B %Y
  time-alt = %H:%M:%S
  format-prefix = %{T4}%{T-}
  label = %time% %date%
  click-left = toggle

  [module/pulseaudio]
  type = internal/pulseaudio
  interval = 5
  use-ui-max = false
  format-volume-prefix = %{T4}%{T-}
  format-muted-prefix = %{T4}%{T-}
  click-left = toggle
  click-right = pavucontrol
  scroll-up = inc
  scroll-down = dec

  [module/menu-apps]
  type = custom/menu
  label-open = %{T4}%{T-}
  label-close = %{T4}%{T-}Cancel
  label-separator = "  "
  menu-0-0 = %{T4}%{T-}Lock
  menu-0-0-exec = xsecurelock
  menu-0-1 = %{T4}%{T-}Reboot
  menu-0-1-exec = systemctl reboot
  menu-0-2 = %{T4}%{T-}Shutdown
  menu-0-2-exec = systemctl poweroff
#+end_src
*** Widgets/Scripts
**** Unread mails widget
#+begin_src bash :mkdirp yes :tangle ~/.config/polybar/mails
  #!/bin/sh
  maildir = ~/mails/new
  prog = isync
  count = 0

  if [ -x $prog ]; then
      $prog 2>/dev/null&
      wait
  fi

  count = $(ls -1 "${maildir}" | wc -l)
  echo "${count}"
#+end_src
** Sxhkd
#+begin_src bash :mkdirp yes :tangle ~/.config/sxhkd/sxhkdrc :tangle-mode (identity #o644)
  #
  # wm independent hotkeys
  #

  # terminal emulator
  super + Return
    alacritty

  # program launcher
  super + @space
    ~/.config/scripts/dmenu
  
  # make sxhkd reload its configuration files:
  super + Escape
    pkill -USR1 -x sxhkd

  #
  # bspwm hotkeys
  #

  # quit/restart bspwm
  super + alt + {q,r}
    bspc {quit,wm -r}

  # close and kill
  super + {_,shift + }w
    bspc node -{c,k}

  # alternate between the tiled and monocle layout
  super + m
    bspc desktop -l next

  # send the newest marked node to the newest preselected node
  super + y
    bspc node newest.marked.local -n newest.!automatic.local

  # swap the current node and the biggest node
  super + g
    bspc node -s biggest

  #
  # state/flags
  #

  # set the window state
  super + {t,shift + t,s,f}
    bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

  # set the node flags
  super + ctrl + {m,x,y,z}
    bspc node -g {marked,locked,sticky,private}

  #
  # focus/swap
  #

  # focus the node in the given direction
  super + {_,shift + }{h,j,k,l}
    bspc node -{f,s} {west,south,north,east}

  # focus the node for the given path jump
  super + {p,b,comma,period}
    bspc node -f @{parent,brother,first,second}

  # focus the next/previous node in the current desktop
  super + {_,shift + }c
    bspc node -f {next,prev}.local

  # focus the next/previous desktop in the current monitor
  super + bracket{left,right}
    bspc desktop -f {prev,next}.local

  # focus the last node/desktop
  super + {grave,Tab}
    bspc {node,desktop} -f last

  # focus the older or newer node in the focus history
  super + {o,i}
    bspc wm -h off; \
    bspc node {older,newer} -f; \
    bspc wm -h on

  # focus or send to the given desktop
  super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} '^{1-9,10}'

  #
  # preselect
  #

  # preselect the direction
  super + ctrl + {h,j,k,l}
    bspc node -p {west,south,north,east}

  # preselect the ratio
  super + ctrl + {1-9}
    bspc node -o 0.{1-9}

  # cancel the preselection for the focused node
  super + ctrl + space
    bspc node -p cancel

  # cancel the preselection for the focused desktop
  super + ctrl + shift + space
    bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

  #
  # move/resize
  #

  # expand a window by moving one of its side outward
  super + alt + {h,j,k,l}
    bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

  # contract a window by moving one of its side inward
  super + alt + shift + {h,j,k,l}
    bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

  # move a floating window
  super + {Left,Down,Up,Right}
    bspc node -v {-20 0,0 20,0 -20,20 0}

  # screenshots
  alt + p
    maim -s | xclip -selection clipboard -t image/png

  # media
  super + plus
    pactl set-sink-volume 0 +5%

  XF86AudioRaiseVolume
    pactl set-sink-volume 0 +5%

  super + minus
    pactl set-sink-volume 0 -5%

  XF86AudioLowerVolume
    pactl set-sink-volume 0 -5%

  super + m
    pactl set-sink-mute 0 toggle

  XF86AudioMute
    pactl set-sink-mute 0 toggle

  super + .
    playerctl play-pause

  super + x
    playerctl next

  super + y
    playerctl previous
#+end_src
** Zathura
#+begin_src bash :tangle ~/.config/wal/templates/zathurarc
  set font "Roboto 12"
  set guioptions "v"
  set adjust-open "width"
  set statusbar-basename "true"
  set render-loading "false"
  set scroll-stop "120"
  set recolor "true"

  # [colors]
  set default-bg "{background}"
  set default-fg "{foreground}"
  set statusbar-bg "{background}"
  set statusbar-fg "{foreground}"
  set inputbar-bg "{background}"
  set inputbar-fg "{foreground}"
  set notification-bg "{background}"
  set notification-fg "{foreground}"
  set notification-error-bg "{background}"
  set notification-error-fg "{foreground}"
  set notification-warning-bg "{background}"
  set notification-warning-fg "{foreground}"
  set highlight-color "{color3}"
  set highlight-active-color "{color4}"
  set completion-bg "{color3}"
  set completion-fg "{color4}"
  set recolor-lightcolor "{background}"
  set recolor-darkcolor "{foreground}"
#+end_src
** zsh
#+begin_src bash :mkdirp yes :tangle ~/.profile
  alias n="nnn"
  alias vim="nvim"
  alias v="nvim"
  alias e="emacs"
  alias c="clear"
  alias ls="exa --color=always"
  alias l="exa -abgHhl@ --git --color=always --group-directories-first"
  alias cat="bat --theme=base16-256 --paging=never --color=always"
  alias less="bat --theme=base16-256 --paging=always --style=changes --color=always"
  alias tree="exa --tree --color=always"

  export XDG_CONFIG_HOME="${HOME}/.config"
  export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  export FZF_DEFAULT_COMMAND="rg --files"
  export BROWSER="$(command -v nyxt)"
  export EDITOR="$(command -v emacs)"
#+end_src
#+begin_src bash :mkdirp yes :tangle ~/.zshrc
  wal -Rq

  if [ -f ~/.cache/wal/colors.sh ]; then
    source ~/.cache/wal/colors.sh
  fi

  source ~/.profile
  source /usr/share/fzf/shell/key-bindings.zsh

  # Zinit
  if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
      print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
      command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
      command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
          print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
          print -P "%F{160}▓▒░ The clone has failed.%f%b"
  fi

  source "$HOME/.zinit/bin/zinit.zsh"
  autoload -Uz _zinit
  (( ${+_comps} )) && _comps[zinit]=_zinit

  zinit ice depth"1"

  zinit ice pick"async.zsh" src"pure.zsh"
  zinit light sindresorhus/pure
  zinit light zimfw/archive

  zinit wait lucid light-mode for \
        atinit"zicompinit; zicdreplay" \
          zdharma/fast-syntax-highlighting \
        atload"_zsh_autosuggest_start" \
          zsh-users/zsh-autosuggestions \
        blockf atpull"zinit creinstall -q ." \
          zsh-users/zsh-completions

  zinit ice from"gh-r" as"program"
  zinit light junegunn/fzf-bin

  zinit ice wait"1" lucid
  zinit light Aloxaf/fzf-tab

  eval "$(direnv hook zsh)"

  if [ -z "${DISPLAY}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
      exec startx
  fi
#+end_src
** xinitrc
#+begin_src bash :mkdirp yes :tangle ~/.xinitrc
  exec bspwm
#+end_src
** Nyxt
*** Init
#+begin_src emacs-lisp :mkdirp yes :tangle ~/.config/nyxt/init.lisp
  (in-package #:nyxt-user)

  (load "~/.cache/wal/nyxt-style.lisp")
  (load-after-system :nx-search-engines (nyxt-init-file "search-engines.lisp"))

  (define-configuration buffer
    ((default-modes (append '(vi-normal-mode) %slot-default%))))

  (define-configuration browser
    ((session-restore-prompt :never-restore)))

  (define-configuration nyxt/web-mode:web-mode
    ((nyxt/web-mode:hints-alphabet "asdfghqwert")))
#+end_src
*** Style
#+begin_src emacs-lisp :tangle ~/.config/wal/templates/nyxt-style.lisp
      (in-package #:nyxt-user)

      (define-configuration window
        ((message-buffer-style
          (str:concat
           %slot-default%
           (cl-css:css
            '((body
               :background-color "{background}"
               :color "{color7}")))))))

      (define-configuration prompt-buffer
        ((style
          (str:concat
           %slot-default%
           (cl-css:css
            '((*
               :font-family "Fira Code"
               :font-size "12px"
               :line-height "14px")
              (body
               :background-color "{background}"
               :border-top "1px solid {color7}"
               :color "{color7}")
              ("#prompt-area"
               :background-color "{background}"
               :color "{color7}")
              ("#input"
               :background-color "{background}"
               :color "{color7}")
              (".source-name"
               :background-color "{background}"
               :color "{foreground}")
              (".source-content"
               :background-color "{background}")
              (".source-content th"
               :background-color "{color7}"
               :color "{background}")
              ("#selection"
               :background-color "{background}"
               :color "{color2}")
              (.selected
               :background-color "{color3}")
              (".marked"
               :background-color "{background}"
               :color "{foreground}"
               :font-weight "bold")))))))

      (define-configuration internal-buffer
        ((style
          (str:concat
           %slot-default%
           (cl-css:css
            '((title
               :color "{foreground}")
              (body
              :background-color "{background}"
              :color "{foreground}")
              (hr
              :color "{foreground}")
              (a
              :color "{color3}")
              (.button
              :color "{color4}"
              :background-color "{color7}")))))))

      (define-configuration status-buffer
        ((style
          (str:concat
           %slot-default%
           (cl-css:css
            '((*
               :font-family "Fira Code"
               :font-size "12px"
               :line-height "14px")
              (body
               :background-color "{background}")
              (.button
               :color "{color7}")
              (".button:hover"
               :color "{foreground}")
              (.tab
               :color "{color7}")
              (".tab:hover"
               :color "{foreground}")
              ("#container"
               :grid-template-columns "2fr 3fr 240px")
              ("#controls"
               :display "none")
              (.arrow-right
               :display "none")
              (.arrow-left
               :display "none")
              ("#url"
               :background-color "{background}"
               :border-top "1px solid {color7}")
              ("#modes"
               :background-color "{background}"
               :border-top "1px solid {color7}"
               :color "{color7}")
              ("#tabs"
               :background-color "{background}"
               :border-top "1px solid {color7}")))))))
#+end_src
*** Search Engines
#+begin_src emacs-lisp :mkdirp yes :tangle ~/.config/nyxt/search-engines.lisp
      (in-package #:nyxt-user)

      ;; duckduckgo settings
      (defvar *duckduckgo-keywords*
        '(:theme :light
          :help-improve-duckduckgo nil
          :homepage-privacy-tips nil
          :newsletter-reminders nil
          :install-reminders nil
          :install-duckduckgo nil
          :units-of-measure :metric
          :keyboard-shortcuts t
          :advertisements nil
          :open-in-new-tab nil
          :infinite-scroll nil
          :safe-search :off
          :font-size :medium
          :header-behavior :on-fixed
          :font :helvetica
          :background-color "CCCCCC"
          :center-alignment t))

      (define-configuration buffer
        ((search-engines (list
                          (engines:google :shortcut "g"
                                          :safe-search nil)
                          (engines:google :shortcut "maps"
                                          :object :maps)
                          (make-instance 'search-engine
                                         :shortcut "osm"
                                         :search-url "https://www.openstreetmap.org/search?query=~a"
                                         :fallback-url "https://www.openstreetmap.org/")
                          (make-instance 'search-engine
                                         :shortcut "wiki"
                                         :search-url "https://de.wikipedia.org/w/index.php?search=~a"
                                         :fallback-url "https://de.wikipedia.org/")
                          (make-instance 'search-engine
                                         :shortcut "yt"
                                         :search-url "https://www.youtube.com/results?search_query=~a"
                                         :fallback-url "https://www.youtube.com/")
                          (apply #'engines:duckduckgo-images
                                :shortcut "i" *duckduckgo-keywords*)
                          (apply #'engines:duckduckgo
                                :shortcut "d" *duckduckgo-keywords*)
        )))
      )
#+end_src
*** Desktop file
#+begin_src emacs-lisp :tangle ~/.local/share/applications/Nyxt.desktop
  [Desktop Entry]
  Name=Nyxt
  Type=Application
  Path=/usr/local/bin/nyxt
  Terminal=false
  Exec=nyxt
#+end_src
* Default applications
#+begin_src emacs-lisp :tangle ~/.config/mimeapps.list
  [Default Applications]
  text/html=Nyxt.desktop
  x-scheme-handler/http=Nyxt.desktop
  x-scheme-handler/https=Nyxt.desktop
  x-scheme-handler/about=Nyxt.desktop
  x-scheme-handler/unknown=Nyxt.desktop
#+end_src
* Scripts
** Dmenu
#+begin_src bash :mkdirp yes :tangle ~/.config/scripts/dmenu :tangle-mode (identity #o755)
  #!/usr/bin/zsh
  source ~/.cache/wal/colors.sh
  dmenu_run -nb "$color0" -nf "$color7" -sb "$color7" -sf "$color0" -fn "Fira Code:size=9"
#+end_src
** Listen to monitor changes
#+begin_src bash :tangle ~/.config/scripts/bspwm_workspaces :tangle-mode (identity #o755)
  bspc subscribe monitor | while read -r line; do
      case $line in
          monitor_add*|monitor_geometry*)
              if [ "$(bspc query -M | wc -l)" -eq "2"]; then
                  bspc monitor $(bspc query -M | sed -n 1p) -d "1" "2" "3" "4" "5"
                  bspc monitor $(bspc query -M | sed -n 2p) -d "6" "7" "8" "9" "0"
              else
                  bspc monitor -d "1" "2" "3" "4" "5" "6" "7" "8" "9" "0"
              fi
          ;;
      *)
      ;;
    esac
  done &
#+end_src
** Generate wallpaper
#+begin_src bash :tangle ~/.config/scripts/generate_wallpaper :tangle-mode (identity #o755)
  #!/usr/bin/zsh
  source ~/.cache/wal/colors.sh
  sed "s/black/${color0}/g; s/white/${color7}/g" ~/.config/scripts/wallpaper_file > ~/.wallpaper
#+end_src
