* Emacs
** straight.el
#+begin_src emacs-lisp
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	(expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-exp)))
    (load bootstrap-file nil 'nomessage))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)
#+end_src

** Keep emacs.d clean
#+begin_src emacs-lisp
  ;; Change user-emacs-directory to keep unwanted things out of .emacs.d
  (setq user-emacs-directory (expand-file-name "url/history" user-emacs-directory))

  ;; no-littering
  (use-package no-littering)
#+end_src

** UTF-8
#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)
#+end_src

** ESC cancels all
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Evil
#+begin_src emacs-lisp
  (use-package undo-tree
	       :init
	       (global-undo-tree-mode 1))

  (use-package evil
	       :init
	       (setq evil-want-integration t)
	       (setq evil-want-keybinding nil)
	       (setq evil-want-C-u-scroll t)
	       (setq evil-want-C-i-jump nil)
	       (setq evil-respect-visual-line-mode t)
	       (setq evil-undo-system 'undo-tree)
	       :config
	       (evil-mode 1)
	       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	       ;; Use visual line motions even outside of visual-line-mode-buffers
	       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

	       (evil-set-initial-state 'messages-buffer-mode 'normal)
	       (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
	       :after evil
	       :init
	       :config
	       (evil-collection-init))
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
	       :init (which-key-mode)
	       :diminish which-key-mode
	       :config
	       (setq which-key-idle-delay 0.2)
#+end_src

** Leader bindings
#+begin_src emacs-lisp
  (use-package general
	       :config
	       (general-evil-setup t)

	       (general-create-definer hen/leader-key-def
				       :keymaps '(normal insert visual emacs)
				       :prefix "SPC"
				       :global-prefix "C-SPC")

	       (general-create-definer hen/ctrl-c-keys
				       :prefix "C-c"))
#+end_src

** Interface
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ; Disable tool bar
  (tooltip-mode -1) ; Disable tooltips
  (menu-bar-mode -1) ; Disable menu bar

  ;; Visible bell
  (setq visible-bell t)

  ;; Maximize window
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package dracula-theme :defer t)
  (load-theme 'dacula t)
#+end_src

** Font
#+begin_src emacs-lisp
#+end_src

** Emojis
#+begin_src emacs-lisp
  (use-package emojify
	       :hook (after-init . global-emojify-mode))
#+end_src

** Mode line
#+begin_src emacs-lisp
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package docker
	       :straight t
	       :ensure t
	       :bind ("C-c d" . docker))
#+end_src

** Feeds
#+begin_src emacs-lisp
  (use-package elfeed
	       :straight t
	       :commands elfeed
	       :bind ("C-x w" . elfeed)
	       :config
	       (setq elfeed-feeds
		     '("https://reddit.com/r/emacs/.rss")))
#+end_src

** Mails
#+begin_src emacs-lisp
  (use-package mu4e-alert
	       :straight t
	       :hook ((after-init . mu4e-alert-enable-notifications)
		      (after-init . mu4e-alert-enable-mode-line-display))
#+end_src

** Tabs
#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+end_src

** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
	       :straight t
	       :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Automatically clean whitespace
#+begin_src emacs-lisp
  (use-package ws-butler
	       :straight t
	       :hook ((text-mode . ws-butler-mode)
		      (prog-mode . ws-butler-mode))
#+end_src

** Completion
#+begin_src emacs-lisp
  (use-package ivy
	       :straight t
	       :diminish
	       :init
	       (ivy-mode 1)
	       :config
	       (setq ivy-use-virtual-buffers t)
	       (setq ivy-wrap t)
	       (setq ivy-count-format "(%d/%d) ")
	       (setq enable-recursive-minibuffers t))

  (use-package counsel
	       :straight t
	       :after ivy)

  (use-package wgrep)

  ;; Improves sorting for fuzzy-matched results
  (use-package flx
	       :after ivy
	       :defer t
	       :init
	       (setq ivy-flx-limit 10000))

  (use-package prescient
	       :after counsel
	       :config
	       (prescient-persist-mode 1))

  (use-package ivy-prescient
	       :after prescient
	       :config
	       (ivy-prescient-mode 1))
#+end_src

** App launcher
#+begin_src emacs-lisp
  (use-package app-launcher
	       :straight '(app-launcher :host github :repo "SebastienWae/app-launcher"))
#+end_src
