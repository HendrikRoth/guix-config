#+TITLE: My personal guix system configuration [in progress]
#+PROPERTY: header-args :tangle-mode
#+PROPERTY: header-args:sh :tangle-mode

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:
:CONTENTS:
- [[#channels][Channels]]
- [[#systems][Systems]]
  - [[#base-configuration][Base Configuration]]
  - [[#machines][Machines]]
    - [[#work][work]]
    - [[#desktop][desktop]]
    - [[#notebook][notebook]]
  - [[#usb-installation-image][USB Installation image]]
- [[#programs][Programs]]
  - [[#emacs][Emacs]]
    - [[#package-management][Package management]]
    - [[#basic-settings][Basic settings]]
      - [[#personal-information][Personal information]]
      - [[#esc-cancels-all][ESC cancels all]]
      - [[#utf-8][UTF-8]]
      - [[#tabs][Tabs]]
      - [[#yes-or-no][Yes or no]]
      - [[#fill-column-to-80-characters][Fill column to 80 characters]]
      - [[#keep-emacsd-clean][Keep .emacs.d clean]]
      - [[#backup-files][Backup Files]]
      - [[#auto-save-files][Auto Save Files]]
      - [[#lock-files][Lock Files]]
      - [[#projectile-files][Projectile Files]]
      - [[#tramp][Tramp]]
      - [[#moving-deleted-files-to-trash][Moving deleted files to trash]]
      - [[#increase-undo-limit-10mb][Increase undo limit (10mb)]]
      - [[#handle-camelcase-as-seperate-words][Handle CamelCase as seperate words]]
      - [[#clipboard][Clipboard]]
    - [[#keybindings][Keybindings]]
      - [[#vim-keybindings][Vim keybindings]]
      - [[#leader-bindings][Leader bindings]]
    - [[#interface][Interface]]
      - [[#remove-distractions][Remove distractions]]
      - [[#line-numbers][Line numbers]]
      - [[#which-key][Which-key]]
      - [[#dashboard][Dashboard]]
      - [[#modeline][Modeline]]
      - [[#bracesparenthesisdelimiters][Braces/Parenthesis/Delimiters]]
      - [[#theme][Theme]]
      - [[#fonts][Fonts]]
      - [[#completion][Completion]]
      - [[#workspaces][Workspaces]]
      - [[#distraction-free-writing][Distraction free writing]]
      - [[#windows][Windows]]
      - [[#buffers][Buffers]]
      - [[#cursor-highlighting-effect][Cursor highlighting effect]]
      - [[#whitespaces][Whitespaces]]
    - [[#dired][Dired]]
    - [[#productivity][Productivity]]
      - [[#alerts][Alerts]]
      - [[#spelling-check][Spelling check]]
      - [[#clean-whitespace][Clean whitespace]]
      - [[#snippets][Snippets]]
      - [[#emojis][Emojis!]]
      - [[#commenting][Commenting]]
      - [[#dictionary][Dictionary]]
      - [[#uml][UML]]
    - [[#applications][Applications]]
      - [[#calendar][Calendar]]
      - [[#docker][Docker]]
      - [[#rss-feeds][RSS Feeds]]
      - [[#openscad][OpenSCAD]]
      - [[#mail][Mail]]
    - [[#development][Development]]
      - [[#git][Git]]
      - [[#projectile][Projectile]]
      - [[#direnv][Direnv]]
      - [[#lsp][LSP]]
      - [[#debug][Debug]]
      - [[#languages][Languages]]
        - [[#emacs-lisp][Emacs Lisp]]
        - [[#typescript][Typescript]]
        - [[#svelte][Svelte]]
        - [[#vue][Vue]]
        - [[#javascript--jsx][JavaScript & JSX]]
        - [[#markdown][Markdown]]
        - [[#html][HTML]]
        - [[#css][CSS]]
        - [[#yaml][YAML]]
        - [[#json][JSON]]
      - [[#code-formatting][Code formatting]]
      - [[#graphql][GraphQL]]
      - [[#snippets][Snippets]]
        - [[#svelte][Svelte]]
        - [[#css][CSS]]
          - [[#background][Background]]
    - [[#org-mode][Org-Mode]]
      - [[#basic-settings][Basic settings]]
      - [[#vim-keybindings][Vim keybindings]]
      - [[#tangle-on-save][Tangle on save]]
      - [[#update-tocs-on-save][Update TOCs on save]]
      - [[#reminder][Reminder]]
      - [[#styling][Styling]]
      - [[#roam][Roam]]
      - [[#calendar-sync][Calendar sync]]
      - [[#snippets][Snippets]]
        - [[#author][Author]]
        - [[#date][Date]]
        - [[#e-mail][E-Mail]]
        - [[#source-blocks][Source blocks]]
        - [[#image][Image]]
        - [[#table][Table]]
        - [[#uml][UML]]
        - [[#video][Video]]
        - [[#lisp][Lisp]]
      - [[#templates][Templates]]
:END:

* Channels
*.config/guix/channels.scm*
#+BEGIN_SRC scheme :tangle ~/.config/guix/channels.scm
  (list (channel
	 (name 'nonguix)
	 (commit "ee35a1f1cd50ba0d4bfee37f2b084bc0797885c")
	 (url "https://gitlab.com/nonguix/nonguix"))
	(channel
	 (name 'guix)
	 (commit "190187326ad7516dd6728eed7bb6ef2d4f92897a")
	 (url "https://git.savannah.gnu.org/git/guix.git")
	 (introduction
	  (make-channel-introduction
	   "9edb3f66fd807b096b48283debdcddccfea34bad"
	   (openpgp-fingerprint
	    "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+END_SRC

* Systems
** Base Configuration
*.config/guix/systems/base-system.scm:*
#+BEGIN_SRC scheme :mkdirp yes :tangle ~/.config/guix/systems/base-system.scm
  (define-module (base-system)
    #:use-module (gnu)
    #:use-module (gnu system nss)
    #:use-module (gnu services cups)
    #:use-module (gnu services desktop)
    #:use-module (gnu services docker)
    #:use-module (gnu services networking)
    #:use-module (gnu packages wm)
    #:use-module (gnu packages cups)
    #:use-module (gnu packages gtk)
    #:use-module (gnu packages xorg)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages web-browsers)
    #:use-module (gnu packages version-control)
    #:use-module (gnu packages package-management)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu system linux-initrd))

  (use-service-modules desktop org)
  (use-package-modules certs)
  (use-package-modules shells)
#+END_SRC

Define the =base-operating-system= which will be inherited by all machine configurations.

#+BEGIN_SRC scheme :mkdirp yes :tangle ~/.config/guix/systems/base-system.scm
  (define-public base-operating-system
    (operating-system
     (host-name "hendrik")
     (timezone "Europe/Berlin")
     (locale "en_US.utf-8")

     ;; Use non-free Linux and firmware
     (kernel linux)
     (firmware (list linux-firmware))
     (initrd microcode-initrd)

     ;; Keyboard layout
     (keyboard-layout (keyboard-layout "us" "altgr-intl"))

     ;; Dummy filesystem, will be overridden
     (file-systems (cons*
		    (file-system
		     (mount-point "/tmp")
		     (device "none")
		     (type "tmpfs")
		     (check? #f))
		    %base-file-systems))

     ;; User account
     (users (cons (user-account
		   (name "hendrik")
		   (comment "Hendrik Roth")
		   (group "users")
		   (home-directory "/home/hendrik")
		   (supplementary-groups '(
					   "wheel" ;; sudo
					   "netdev" ;; network devices
					   "tty"
					   "input"
					   "docker"
					   "lp" ;; control bluetooth devices
					   "audio" ;; control audio devices
					   "video" ;; control video devices
      )))
		  %base-user-accounts))

      ;; Bare minimum system packages
      (packages (append (list
        git
        ntfs-3g
        exfat-utils
        fuse-exfat
        vim
        emacs
        xterm
        bluez
        bluez-alsa
        pulseaudio
        tlp
        xf86-video-libinput
        nss-certs ;; for https access
        gvfs) ;; for user mounts
        %base-packages))
#+END_SRC

** Machines
*** work
My work machine at the office.

#+BEGIN_SRC scheme :mkdirp yes :tangle ~/.config/guix/systems/work.scm
  (define-module (work)
    #:use-module (base-system)
    #:use-module (gnu))

  (operating-system
   (inherit base-operating-system)
   (host-name "work")

   (mapped-devices
    (list (mapped-device
	   (source (uuid ""))
	   (target "system-root")
	   (type luks-device-mapping))))

   (file-systems (cons*
		  (file-system
		   (device (file-system-label "root"))
		   (mount-pount "/")
		   (type "ext4")
		   (dependencies mapped-devices))
		  %base-file-systems)))
#+END_SRC

*** desktop
My home workstation.

*** notebook
My travel notebook.

** USB Installation image
#+begin_src scheme :mkdirp yes :tangle ~/.config/guix/systems/install.scm
(define-module (nongnu system install)
  #:use-module (gnu system)
  #:use-module (gnu system install)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu curl)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages package-management)
  #:use-module (nongnu packages linux)
  #:export (installation-os-nonfree))

(define installation-os-nonfree
  (operating-system
    (inherit installation-os)
    (kernel linux)
    (firmware (list linux-firmware))
  (kernel-arguments '("net.iframes=0"))
  (packages (append (list
    exfat-utils fuse-exfat git curl vim emacs-no-x-toolkit)
    (operation-system-packages installation-os)))))

installation-os-nonfree
#+end_src

To build the image, run the command:
#+begin_src sh
guix system image ./install.scm --image-size=5G
#+end_src

Choose the install method =Install using the shell based process.= on boot.

* Programs
** Emacs
*** Package management
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src
*** Basic settings
**** Personal information
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq user-full-name "Hendrik Roth")
(setq user-mail-address "hi@hendrikroth.com")
#+end_src
**** ESC cancels all
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
**** UTF-8
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(set-default-coding-systems 'utf-8)
#+end_src
**** Tabs
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
(setq-default indent-tabs-mode nil)
#+end_src
**** Yes or no
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
**** Fill column to 80 characters
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default fill-column 80)
#+end_src
**** Keep .emacs.d clean
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq user-emacs-directory (expand-file-name "~/.cache/emacs"))
(use-package no-littering)
#+end_src
**** Backup Files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(make-directory (expand-file-name "tmp/backups/" user-emacs-directory) t)
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src
**** Auto Save Files
Don't create =#Name.file#= files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src
**** Lock Files
Don't create =.#Name.file= files.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq create-lockfiles nil)
#+end_src
**** Projectile Files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq projectile-known-projects-file (expand-file-name "tmp/projectile-bookmarks.eld" user-emacs-directory)
      lsp-session-file (expand-file-name "tmp/.lsp-session-v1" user-emacs-directory))
#+end_src
**** Tramp
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq tramp-default-method "ssh")
#+end_src
**** Moving deleted files to trash
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default delete-by-moving-to-trash t)
#+end_src
**** Increase undo limit (10mb)
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq undo-limit 10000000)
#+end_src
**** Handle CamelCase as seperate words
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(global-subword-mode 1)
#+end_src
**** Clipboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default select-enable-clipboard t)
#+end_src
*** Keybindings
**** Vim keybindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package undo-tree
  :init
  (global-undo-tree-mode 1))

(use-package evil
  :after undo-tree
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode-buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :init
  :config
  (evil-collection-init))
#+end_src
**** Leader bindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package general
  :config
  (general-evil-setup t)

(general-create-definer hr/leader-key-def
  :keymaps '(normal insert visual emacs)
  :prefix "SPC"
  :global-prefix "C-SPC")

(general-create-definer hr/ctrl-c-keys
  :prefix "C-c"))
#+end_src
*** Interface
**** Remove distractions
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq inhibit-startup-message t)
  (setq-default inhibit-startup-screen t)
  (setq-default inhibit-scratch-message "")

  (scroll-bar-mode -1) ; Disable visual scrollbar
  (tool-bar-mode -1) ; Disable toolbar
  (tooltip-mode -1) ; Disable tooltips
  (menu-bar-mode -1) ; Disable menu bar

  (setq visible-bell t) ; Visual bell
#+end_src
**** Line numbers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(column-number-mode)

;; Relative line numbers
(setq display-line-numbers-type 'relative)

;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
                prog-mode-hook
    conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Override some modes
(dolist (mode '(org-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
**** Which-key
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package which-key
             :init (which-key-mode)
	     :diminish which-key-mode
	     :config
	     (setq which-key-idle-delay 0.5))
#+end_src
**** Dashboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts t)
    (setq dashboard-startup-banner 2)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-footer nil)
    (setq dashboard-items '((recents . 5)
    (bookmarks . 5)
    (projects . 5)
    (agenda . 5)
    (registers . 5)))
    (setq dashboard-week-agenda t))
#+end_src
**** Modeline
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package all-the-icons)
(use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-lsp t)
    (doom-modeline-github t)
    (doom-modeline-mu4e t))
#+end_src
**** Braces/Parenthesis/Delimiters
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
;; Highlight matching braces
(use-package paren
  :config
    (setq show-paren-delay 0)
    (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
    (show-paren-mode 1))

;; Colorful delimiters
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;;(use-package smartparens
;;  :hook (prog-mode . smartparens-mode))

(use-package rainbow-mode
  :defer t
  :hook (org-mode
    emacs-lisp-mode
    web-mode
    typescript-mode
    js2-mode))
#+end_src
**** Theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package twilight-bright-theme :ensure :defer)
(straight-use-package '(twilight-anti-bright-theme
  :ensure :defer :type git :host github
  :repo "jimeh/twilight-anti-bright-theme"))

(use-package circadian
  :ensure t
  :config
    (setq calendar-latitude 51.5)
    (setq calendar-longitude 7.5)
    (setq circadian-themes '((:sunrise . twilight-bright)
    (:sunset . twilight-anti-bright)))
    (circadian-setup)
  :custom
    (add-hook 'circadian-after-load-theme-hook
      #'(lambda (twilight-anti-bright)
      (set-face-foreground 'linum "#F52503")))
    (add-hook 'circadian-after-load-theme-hook
      #'(lambda (twilight-bright)
      (set-face-foreground 'linum "#F52503"))))
#+end_src
**** Fonts
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(set-face-attribute 'default nil :font "Fira Code" :height 110)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 110)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Fira Code" :height 110 :weight 'regular)
#+end_src
**** Completion
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package vertico
    :straight '(vertico :host github :repo "minad/vertico" :branch "main")
    :bind (:map vertico-map
      ("C-j" . vertico-next)
      ("C-j" . vertico-previous)
      ("C-f" . vertico-exit-input)
      ("C-l" . vertico-exit-input)
    :map minibuffer-local-map
      ("M-h" . backward-kill-word))
    :custom
      (vertico-cycle t)
    :init
      (vertico-mode))

  ;; Completions in regions
  (use-package corfu
    :straight '(corfu :host github :repo "minad/corfu")
    :bind(:map corfu-map
      ("C-j" . corfu-next)
      ("C-k" . corfu-previous)
      ("C-f" . corfu-insert))
    :custom
      (corfu-cycle t)
    :config
      (corfu-global-mode))

  ;; Improved candidate filtering
  (use-package orderless
    :init
      (setq completion-styles '(orderless)
      completion-category-defaults nil
      completion-category-overrides '((file (styles . (partial-completion))))))

  (use-package consult
    :demand t)

  (use-package marginalia
    :after vertico
    :custom
      (marginalia-annotators '(marginalia-annnotators-heavy marginalia-annotators-light nil))
    :init
      (marginalia-mode))

  (hr/leader-key-def
    "s" '(:ignore t :which-key "search")
    "sl" '(consult-line :which-key "search line")
    "si" '(consult-imenu :which-key "search item/topic")
    "sp" '(consult-git-grep :which-key "search in project")
  )
#+end_src
**** Workspaces
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (use-package perspective
      :demand t
      :custom
      (persp-initial-frame-name "Main")
      :config
      ;; Running `persp-mode' multiple times resets the perspective list...
      (unless (equal persp-mode t)
        (persp-mode)))

  (hr/leader-key-def
    "b"  '(:ignore t :which-key "buffers")
    "bs" '(consult-buffer :which-key "switch buffer")
    "bk" '(persp-kill-buffer :which-key "kill buffer")
    "W"  '(:ignore t :which-key "workspace")
    "Ws" '(persp-switch :which-key "switch")
    "Wn" '(persp-next :which-key "next"))
#+end_src
**** Distraction free writing
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package darkroom
  :hook (org-mode . darkroom-tentative-mode)
  :config
    (setq darkroom-text-scale-increase 0))
#+end_src
**** Windows
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (use-package ace-window
      :ensure t)

    (hr/leader-key-def
      "w"  '(:ignore t :which-key "windows")
      "ws" '(ace-window :which-key "select window")
      "wh" '(windmove-left :which-key "left")
      "wj" '(windmove-down :which-key "down")
      "wk" '(windmove-up :which-key "up")
      "wl" '(windmove-right :which-key "right")
      "wz" '(split-window-vertically :which-key "split vertically")
      "wx" '(split-window-horizontally :which-key "split horizontally")
      "wc" '(delete-window :which-key "close window"))
#+end_src
**** Buffers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package all-the-icons-ibuffer
:ensure t
:init (all-the-icons-ibuffer-mode 1))
#+end_src
**** Cursor highlighting effect
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package beacon
:ensure t
:init (beacon-mode 1))
#+end_src
**** Whitespaces
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(require 'whitespace)
#+end_src
*** Dired
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dired
    :straight nil
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

(use-package dired-single
    :commands (dired dired-jump))

(use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

(hr/leader-key-def
  "d" '(:ignore t :which-key "dired")
  "dd" '(dired :which-key "Here"))

#+end_src
*** Productivity
**** Alerts
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package alert
  :commands alert
  :config
    (setq alert-default-style 'notifications))
#+end_src
**** Spelling check
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src
**** Clean whitespace
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
      (prog-mode . ws-butler-mode)))
#+end_src
**** Snippets
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package yasnippet
  :hook ((prog-mode . yas-minor-mode)
          (org-mode . yas-minor-mode))
  :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-reload-all))
#+end_src
**** Emojis!
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
#+end_src
**** Commenting
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

(hr/leader-key-def
  "/" '(evilnc-comment-or-uncomment-lines :which-key "comment"))
#+end_src
**** Dictionary
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package define-word)
(hr/leader-key-def
  "." '(define-word-at-point :which-key "word definition"))
#+end_src
**** UML
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package plantuml-mode
    :ensure nil
    :mode "\\.plantuml\\'"
    :config
      (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))
#+end_src
*** Applications
**** Calendar
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package calfw
    :commands cfw:open-org-calendar)

(use-package calfw-org
    :after calfw
    :config
    (setq cfw:org-agenda-schedule-args '(:timestamp)))

(hr/leader-key-def
  "C" '(cfw:open-org-calendar :which-key "calendar"))
#+end_src
**** Docker
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package docker
    :ensure t
    :bind ("C-c d" . docker))

(hr/leader-key-def
  "D" '(docker :which-key "docker"))
#+end_src
**** RSS Feeds
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package elfeed
      :commands elfeed
      :bind ("C-x w" . elfeed)
      :config
      (add-to-list 'evil-motion-state-modes 'elfeed-search-mode)
      (add-to-list 'evil-motion-state-modes 'elfeed-show-mode)

      (evil-define-key* 'motion elfeed-search-mode-map
        "gb" #'elfeed-search-browse-url
        "gr" #'elfeed-search-update--force
        "gR" #'elfeed-seach-fetch)

      (evil-define-key* 'motion elfeed-show-mode-map
        "gb" #'elfeed-show-visit
        "gj" #'elfeed-show-next
        "gk" #'elfeed-show-prev))

  (use-package elfeed-org
    :config
    (setq rmh-elfeed-org-files (list "./RSS.org")))

  (use-package elfeed-dashboard
    :ensure t
    :config
    (setq elfeed-dashboard-file "./RSS-Dashboard.org")
    (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))

  (hr/leader-key-def
    "R" '(elfeed :which-key "elfeed"))
#+end_src
**** OpenSCAD
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package scad-mode
    :defer t
    :config
    (autoload 'scad-mode "scad-mode" "A major mode for editing OpenSCAD code." t)
    (add-to-list 'auto-mode-alist '("\\.scad$" . scad-mode)))
#+end_src
**** Mail
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package mu4e
  :defer 20
  :config
    (require 'org-mu4e)
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")
    (setq mu4e-change-filenames-when-moving t)
    (setq mu4e-contexts
    `(,(make-mu4e-context
        :name "Henn1nk"
        :match-func (lambda (msg)
                    (when msg (string-prefix-p "/Henn1nk" (mu4e-message-field msg :maildir))))
        :vars '(
          (user-full-name . "Hendrik Roth")
          (user-mail-address . "mail@henn1nk.com")
          (mu4e-sent-folder . "/Henn1nk/Sent Items")
          (mu4e-trash-folder . "/Henn1nk/Trash")
          (mu4e-drafts-folder . "/Henn1nk/Drafts")
          (mu4e-refile-folder . "/Henn1nk/Archive")
          (mu4e-sent-messages-behavior . sent)
    ))
    ,(make-mu4e-context
        :name "Personal"
        :match-func (lambda (msg)
                    (when msg (string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
        :vars '(
          (mu4e-sent-folder . "/Personal/Sent")
          (mu4e-trash-folder . "/Personal/Trash")
          (mu4e-refile-folder . "/Personal/Archive")
          (mu4e-sent-messages-behavior . sent)
        ))
    ))

  (setq mu4e-context-policy 'pick-first)

  (setq mu4e-view-show-images t)
  (setq mu4e-view-show-addresses 't)

  (setq mu4e-compose-dont-reply-to-self t)

  (setq mail-user-agent 'mu4e-user-agent
    message-send-mail-function 'smtpmail-send-it
    smtpmail-smtp-server "smtp.zoho.eu"
    smtpmail-smtp-service 465
    smtpmail-stream-type 'ssl)

  (setq mu4e-maildir-shortcuts
    '(("/Henn1nk/INBOX" . ?i)
    ("/Henn1nk/Lists/*" . ?l)
    ("/Henn1nk/Sent Mail" . ?s)
    ("/Henn1nk/Trash" . ?t)))

  (add-to-list 'mu4e-bookmarks
    (make-mu4e-bookmark
      :name "All Inboxes"
      :query "maildir:/Henn1nk/INBOX OR maildir:/Personal/INBOX"
      :key ?i))

  (setq message-kill-buffer-on-exit t)

  (setq hr/mu4e-inbox-query
    "(maildir:/Henn1nk/INBOX OR maildir:/Personal/INBOX) AND flag:unread")

  (defun hr/go-to-inbox ()
    (interactive)
      (mu4e-headers-search hr/mu4e-inbox-query))

  (hr/leader-key-def
    "m" '(:ignore t :which-key "mail")
    "mm" 'mu4e
    "mc" 'mu4e-compose-new
    "mi" 'hr/go-to-inbox
    "ms" 'mu4e-update-mail-and-index)

  (mu4e t))
#+end_src

Mail alerts..
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package mu4e-alert
  :after mu4e
  :config
    (setq mu4e-alert-intersting-mail-query hr/mu4e-inbox-query)
    (setq mu4e-alert-notify-repeated-mails nil)
    (mu4e-alert-enable-notifications))
#+end_src
*** Development
**** Git
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package magit-todos
    :defer t)

  (use-package git-gutter
    :diminish
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 2))

  (hr/leader-key-def
    "g" '(:ignore t :which-key "git")
    "gs" 'magit-status
    "gd" 'magit-diff-unstaged
    "gc" 'magit-branch-or-checkout
    "gi" 'magit-init
    "gl" '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb" 'magit-branch
    "gP" 'magit-push-current
    "gp" 'magit-pull-branch
    "gf" 'magit-fetch
    "gF" 'magit-fetch-all
    "gr" 'magit-rebase)
#+end_src
**** Projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'vertico))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/git")
  (setq projectile-project-search-path '("~/git")))
    (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

(hr/leader-key-def
  "p" '(:ignore t :which-key "projectile")
  "pi" 'consult-imenu
  "pf" 'counsel-projectile-find-file
  "ps" 'counsel-projectile-switch-project
  "pF" 'counsel-projectile-rg
  "pp" 'counsel-projectile
  "pc" 'projectile-compile-project
  "pd" 'projectile-dired)
#+end_src
**** Direnv
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package direnv
    :config
    (direnv-mode))
#+end_src
**** LSP
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package lsp-mode
  :commands lsp
  :hook ((typescript-mode js2-mode web-mode) . lsp)
  :bind (:map lsp-mode-map
    ("TAB" . completion-at-point)))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover t)
    (setq lsp-ui-doc-position 'bottom)
    (ls-ui-doc-show))

(hr/leader-key-def
  "l" '(:ignore t :which-key "lsp")
  "ld" 'xref-find-definitions
  "lr" 'xref-find-references
  "ln" 'lsp-ui-find-next-reference
  "lp" 'lsp-ui-find-prev-reference
  "ls" 'counsel-imenu
  "le" 'lsp-ui-flycheck-list
  "lS" 'lsp-ui-sideline-mode
  "lX" 'lsp-execute-code-action)
#+end_src
**** Debug
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package dap-mode)
#+end_src
**** Languages
***** Emacs Lisp
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

(use-package helpful
  :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
  :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

(hr/leader-key-def
  "e" '(:ignore t :which-key "eval")
  "eb" '(eval-buffer :whch-key "eval buffer"))

(hr/leader-key-def
  :keymaps '(visual)
  "er" '(eval-region :which-key "eval region"))
#+end_src
***** Typescript
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package nvm :defer t)
  (use-package typescript-mode
      :ensure nil
      :mode "\\.ts\\'"
      :config
      (setq typescript-indent-level 2))
#+end_src
***** Svelte
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package svelte-mode
      :ensure nil
      :mode "\\.svelte\\'"
      :config
      (setq svelte-basic-offset 2)
      (setq svelte-tag-relative-indent t))
#+end_src
***** Vue
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package vue-mode
      :ensure nil
      :mode "\\.vue\\'")
#+end_src
***** JavaScript & JSX
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package js2-mode
      :ensure nil
      :mode "\\.js?\\|\\.jsx?\\'"
      :custom
      (js-indent-level 2)
      (js-switch-indent-offset 2)
      (js2-highlight-level 3)
      (js2-idle-timer-delay 0)
      :config
      ;; Use js2-mode for NodeJS scripts
      (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

      ;; Don't use the builtin syntax checking
      (setq js2-mode-show-strict-warnings nil))
#+end_src
***** Markdown
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package markdown-mode
      :ensure nil
      :mode "\\.md\\'"
      :config
      (setq markdown-command "marked"))
#+end_src
***** HTML
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; HTML
  (use-package web-mode
      :ensure nil
      :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
      :config
      (setq-default web-mode-code-indent-offset 2)
      (setq-default web-mode-markup-indent-offset 2)
      (setq-default web-mode-attribute-indent-offset 2))

  ;; HTML colors
  (use-package rainbow-mode
    :defer t
    :hook (org-mode
      emacs-lisp-mode
      typescript-mode
      js2-mode))

    ;; Emmet
  (use-package emmet-mode
    :hook
      (css-mode . emmet-mode)
      (html-mode . emmet-mode)
      (svelte-mode . emmet-mode)
      (typescript-mode . emmet-mode)
      (js2-mode . emmet-mode)
      (web-mode . emmet-mode))
#+end_src
***** CSS
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package css-mode
    :ensure nil
    :custom (css-indent-offset 2))
#+end_src
***** YAML
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+end_src
***** JSON
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package json-mode
    :mode "\\.json\\'")
#+end_src
**** Code formatting
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package apheleia
    :config
    (apheleia-global-mode +1))

(use-package prettier-js
    :config
    (setq prettier-js-show-errors nil))
#+end_src
**** GraphQL
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package graphql-doc
  :straight '(graphql-doc :type git :host github :repo "ifitzpatrick/graphql-doc.el")
  :config
  (graphql-doc-add-api "vivid" `(:url "http://localhost:8999/graphql" :data nil :headers nil)))

(hr/leader-key-def
  "G" '(:ignore t :which-key "graphlql")
  "Ge" 'graphql-doc :which-key "open endpoint"
  "Gu" 'graphql-doc-open-url :which-key "open url")
#+end_src

**** Snippets
***** Svelte
#+begin_src html :mkdirp yes :tangle ~/.emacs.d/snippets/svelte/svelte
# -*- mode: snippet -*-
# name: svelte
# key: /svelte
# --
<script lang="ts">
$0
</script>

$1

<style lang="postcss">
$2
</style>
#+end_src
***** CSS
****** Background
#+begin_src html :mkdirp yes :tangle ~/.emacs.d/snippets/css/background-color
# -*- mode: snippet -*-
# name: background-color
# key: /bg
# --
background-color: #${0:DDD};
#+end_src
*** Org-Mode
**** Basic settings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org
    :defer t
    :hook (org-capture-mode-hook . evil-insert-state)
    :config
      (setq org-ellipsis " ▾")
    :custom
      (org-startup-folded 'content)
      (org-startup-truncated nil))
#+end_src
**** Vim keybindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
(evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

(defun hr/search-org-files ()
  (interactive)
  (counsel-rg "" "~/Notes" nil "Search notes:"))

(hr/leader-key-def
  "o"   '(:ignore t :which-key "org mode")

  "oi"  '(:ignore t :which-key "insert")
  "oil" '(org-insert-link :which-key "insert link")

  "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

  "os"  '(hr/search-org-files :which-key "search notes")

  "oa"  '(org-agenda :which-key "status")
  "ot"  '(org-todo-list :which-key "todos")
  "oc"  '(org-capture t :which-key "capture")
  "ox"  '(org-export-dispatch t :which-key "export"))
#+end_src
**** Tangle on save
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defun hr/org-babel-tangle-dont-ask ()
(let ((org-confirm-babel-evaluate nil))
(org-babel-tangle)))

(add-hook 'org-mode-hook (lambda()
  (add-hook
    'after-save-hook #'hr/org-babel-tangle-dont-ask
    'run-at-end 'only-in-org-mode)))
#+end_src
**** Update TOCs on save
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src
**** Reminder
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-wild-notifier
:after org
:config
  (setq org-wild-notifier-keyword-whitelist nil)
  (setq org-wild-notifier-notification-title "Agenda Reminder")
  (setq org-wild-notifier-alert-time 15)
  (org-wild-notifier-mode))
#+end_src
**** Styling
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
**** Roam
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-roam
  :ensure t
  :hook
    (after-init . org-roam-mode)
  :custom
    (org-roam-directory "~/Notes/Roam")
    (org-roam-completion-everywhere t)
    (org-roam-system 'ivy))
#+end_src
**** Calendar sync
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package org-caldav
  :defer t
  :init
  (setq org-caldav-url ""
    org-caldav-inbox nil
    org-caldav-delete-org-entries 'always
    org-caldav-delete-calendar-entries 'never
    org-caldav-calendars
    '((:calendar-id ""
       :inbox "~/Notes/Calendar/Personal.org")
      (:calendar-id ""
       :inbox "~/Notes/Calendar/Work.org"))))
#+end_src
**** Snippets
***** Author
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/author
# -*- mode: snippet -*-
# name: author
# key: /author
# --
#+author: ${1:`user-full-name`}
#+email: ${2:`user-mail-address`}
#+end_src
***** Date
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/date
# -*- mode: snippet -*-
# name: date
# key: /date
# --
#+date: ${1:date}/${2:month}/${3:day}
#+end_src
***** E-Mail
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/email
# -*- mode: snippet -*-
# name: email
# key: /email
# --
#+email: ${1:`user-mail-address`}
#+end_src
***** Source blocks
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/src
# -*- mode: snippet -*-
# name: src
# key: /src
# --
,#+begin_src ${1:emacs-lisp} :tangle $2
$0
,#+end_src
#+end_src
***** Image
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/image
# -*- mode: snippet -*-
# name: image
# key: /image
# --
#+caption ${1:caption of the image}
[[file:${2:image_path}]]$0
#+end_src
***** Table
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/table
# -*- mode: snippet -*-
# name: table
# key: /table
# --
#+caption: ${1:caption of the table}
| ${2:column 1} | ${3:column 2} |
+---------------+---------------+
#+end_src
***** UML
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/uml
# -*- mode: snippet -*-
# name: uml
# key: /uml
# --
\#+begin_src plantuml
$0
\#+end_src
#+end_src

***** Video
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/video
# -*- mode: snippet -*-
# name: video
# key: /video
# --
[[${1:link of the video}][file:${2:link of the image}]
#+end_src
***** Lisp
#+begin_src yasnippet :mkdirp yes :tangle ~/.emacs.d/snippets/org-mode/emacs-lisp
# -*- mode: snippet -*-
# name: emacs-lisp
# key: /lisp
# --
,#+begin_src emacs-lisp :tangle yes
$0
,#+end_src
#+end_src

**** Templates
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun get-org-target () (read-file-name "File: " org-directory))

  (setq org-capture-templates
        '(("w" "Work")
        ("ws" "Sprint" checkitem (file+headline "~/Notes/Work/Sprint.org" "Next") "* TODO %?\n %i\n %a")
        ("wS" "Specification sheet" entry (file get-org-target) "* THIS IS A TEMPLATE")
        ("p" "Personal")
        ("ps" "Shopping" checkitem (file+headline "~/Notes/Personal/Shopping.org" "Next") "- [ ] %?\n")))
#+end_src
